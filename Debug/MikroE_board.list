
MikroE_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005294  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800541c  0800541c  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005434  08005434  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005434  08005434  00006434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800543c  0800543c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800543c  0800543c  0000643c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005440  08005440  00006440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005444  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00000310  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000036c  2000036c  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f64a  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002320  00000000  00000000  000166d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  000189f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cdb  00000000  00000000  00019a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b53  00000000  00000000  0001a73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001347e  00000000  00000000  0003d28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d47bc  00000000  00000000  0005070c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124ec8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004914  00000000  00000000  00124f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00129820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005404 	.word	0x08005404

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08005404 	.word	0x08005404

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b988 	b.w	8000d2c <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	468e      	mov	lr, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	4688      	mov	r8, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d962      	bls.n	8000b10 <__udivmoddi4+0xdc>
 8000a4a:	fab2 f682 	clz	r6, r2
 8000a4e:	b14e      	cbz	r6, 8000a64 <__udivmoddi4+0x30>
 8000a50:	f1c6 0320 	rsb	r3, r6, #32
 8000a54:	fa01 f806 	lsl.w	r8, r1, r6
 8000a58:	fa20 f303 	lsr.w	r3, r0, r3
 8000a5c:	40b7      	lsls	r7, r6
 8000a5e:	ea43 0808 	orr.w	r8, r3, r8
 8000a62:	40b4      	lsls	r4, r6
 8000a64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a68:	fa1f fc87 	uxth.w	ip, r7
 8000a6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a70:	0c23      	lsrs	r3, r4, #16
 8000a72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a88:	f080 80ea 	bcs.w	8000c60 <__udivmoddi4+0x22c>
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	f240 80e7 	bls.w	8000c60 <__udivmoddi4+0x22c>
 8000a92:	3902      	subs	r1, #2
 8000a94:	443b      	add	r3, r7
 8000a96:	1a9a      	subs	r2, r3, r2
 8000a98:	b2a3      	uxth	r3, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aa6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aaa:	459c      	cmp	ip, r3
 8000aac:	d909      	bls.n	8000ac2 <__udivmoddi4+0x8e>
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab4:	f080 80d6 	bcs.w	8000c64 <__udivmoddi4+0x230>
 8000ab8:	459c      	cmp	ip, r3
 8000aba:	f240 80d3 	bls.w	8000c64 <__udivmoddi4+0x230>
 8000abe:	443b      	add	r3, r7
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac6:	eba3 030c 	sub.w	r3, r3, ip
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11d      	cbz	r5, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40f3      	lsrs	r3, r6
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d905      	bls.n	8000aea <__udivmoddi4+0xb6>
 8000ade:	b10d      	cbz	r5, 8000ae4 <__udivmoddi4+0xb0>
 8000ae0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e7f5      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000aea:	fab3 f183 	clz	r1, r3
 8000aee:	2900      	cmp	r1, #0
 8000af0:	d146      	bne.n	8000b80 <__udivmoddi4+0x14c>
 8000af2:	4573      	cmp	r3, lr
 8000af4:	d302      	bcc.n	8000afc <__udivmoddi4+0xc8>
 8000af6:	4282      	cmp	r2, r0
 8000af8:	f200 8105 	bhi.w	8000d06 <__udivmoddi4+0x2d2>
 8000afc:	1a84      	subs	r4, r0, r2
 8000afe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b02:	2001      	movs	r0, #1
 8000b04:	4690      	mov	r8, r2
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d0e5      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b0e:	e7e2      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f000 8090 	beq.w	8000c36 <__udivmoddi4+0x202>
 8000b16:	fab2 f682 	clz	r6, r2
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	f040 80a4 	bne.w	8000c68 <__udivmoddi4+0x234>
 8000b20:	1a8a      	subs	r2, r1, r2
 8000b22:	0c03      	lsrs	r3, r0, #16
 8000b24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b28:	b280      	uxth	r0, r0
 8000b2a:	b2bc      	uxth	r4, r7
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d907      	bls.n	8000b52 <__udivmoddi4+0x11e>
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x11c>
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	f200 80e0 	bhi.w	8000d10 <__udivmoddi4+0x2dc>
 8000b50:	46c4      	mov	ip, r8
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b60:	fb02 f404 	mul.w	r4, r2, r4
 8000b64:	429c      	cmp	r4, r3
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x144>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x142>
 8000b70:	429c      	cmp	r4, r3
 8000b72:	f200 80ca 	bhi.w	8000d0a <__udivmoddi4+0x2d6>
 8000b76:	4602      	mov	r2, r0
 8000b78:	1b1b      	subs	r3, r3, r4
 8000b7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b7e:	e7a5      	b.n	8000acc <__udivmoddi4+0x98>
 8000b80:	f1c1 0620 	rsb	r6, r1, #32
 8000b84:	408b      	lsls	r3, r1
 8000b86:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8a:	431f      	orrs	r7, r3
 8000b8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b90:	fa20 f306 	lsr.w	r3, r0, r6
 8000b94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b9c:	4323      	orrs	r3, r4
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	fa1f fc87 	uxth.w	ip, r7
 8000ba6:	fbbe f0f9 	udiv	r0, lr, r9
 8000baa:	0c1c      	lsrs	r4, r3, #16
 8000bac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	fa02 f201 	lsl.w	r2, r2, r1
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x1a0>
 8000bc0:	193c      	adds	r4, r7, r4
 8000bc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bc6:	f080 809c 	bcs.w	8000d02 <__udivmoddi4+0x2ce>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f240 8099 	bls.w	8000d02 <__udivmoddi4+0x2ce>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	443c      	add	r4, r7
 8000bd4:	eba4 040e 	sub.w	r4, r4, lr
 8000bd8:	fa1f fe83 	uxth.w	lr, r3
 8000bdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000be0:	fb09 4413 	mls	r4, r9, r3, r4
 8000be4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000be8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bec:	45a4      	cmp	ip, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x1ce>
 8000bf0:	193c      	adds	r4, r7, r4
 8000bf2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bf6:	f080 8082 	bcs.w	8000cfe <__udivmoddi4+0x2ca>
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d97f      	bls.n	8000cfe <__udivmoddi4+0x2ca>
 8000bfe:	3b02      	subs	r3, #2
 8000c00:	443c      	add	r4, r7
 8000c02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c06:	eba4 040c 	sub.w	r4, r4, ip
 8000c0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c0e:	4564      	cmp	r4, ip
 8000c10:	4673      	mov	r3, lr
 8000c12:	46e1      	mov	r9, ip
 8000c14:	d362      	bcc.n	8000cdc <__udivmoddi4+0x2a8>
 8000c16:	d05f      	beq.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c18:	b15d      	cbz	r5, 8000c32 <__udivmoddi4+0x1fe>
 8000c1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c22:	fa04 f606 	lsl.w	r6, r4, r6
 8000c26:	fa22 f301 	lsr.w	r3, r2, r1
 8000c2a:	431e      	orrs	r6, r3
 8000c2c:	40cc      	lsrs	r4, r1
 8000c2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c32:	2100      	movs	r1, #0
 8000c34:	e74f      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000c36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c3a:	0c01      	lsrs	r1, r0, #16
 8000c3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c40:	b280      	uxth	r0, r0
 8000c42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c46:	463b      	mov	r3, r7
 8000c48:	4638      	mov	r0, r7
 8000c4a:	463c      	mov	r4, r7
 8000c4c:	46b8      	mov	r8, r7
 8000c4e:	46be      	mov	lr, r7
 8000c50:	2620      	movs	r6, #32
 8000c52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c56:	eba2 0208 	sub.w	r2, r2, r8
 8000c5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c5e:	e766      	b.n	8000b2e <__udivmoddi4+0xfa>
 8000c60:	4601      	mov	r1, r0
 8000c62:	e718      	b.n	8000a96 <__udivmoddi4+0x62>
 8000c64:	4610      	mov	r0, r2
 8000c66:	e72c      	b.n	8000ac2 <__udivmoddi4+0x8e>
 8000c68:	f1c6 0220 	rsb	r2, r6, #32
 8000c6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c70:	40b7      	lsls	r7, r6
 8000c72:	40b1      	lsls	r1, r6
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c82:	b2bc      	uxth	r4, r7
 8000c84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c88:	0c11      	lsrs	r1, r2, #16
 8000c8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8e:	fb08 f904 	mul.w	r9, r8, r4
 8000c92:	40b0      	lsls	r0, r6
 8000c94:	4589      	cmp	r9, r1
 8000c96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c9a:	b280      	uxth	r0, r0
 8000c9c:	d93e      	bls.n	8000d1c <__udivmoddi4+0x2e8>
 8000c9e:	1879      	adds	r1, r7, r1
 8000ca0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ca4:	d201      	bcs.n	8000caa <__udivmoddi4+0x276>
 8000ca6:	4589      	cmp	r9, r1
 8000ca8:	d81f      	bhi.n	8000cea <__udivmoddi4+0x2b6>
 8000caa:	eba1 0109 	sub.w	r1, r1, r9
 8000cae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb2:	fb09 f804 	mul.w	r8, r9, r4
 8000cb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cba:	b292      	uxth	r2, r2
 8000cbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc0:	4542      	cmp	r2, r8
 8000cc2:	d229      	bcs.n	8000d18 <__udivmoddi4+0x2e4>
 8000cc4:	18ba      	adds	r2, r7, r2
 8000cc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cca:	d2c4      	bcs.n	8000c56 <__udivmoddi4+0x222>
 8000ccc:	4542      	cmp	r2, r8
 8000cce:	d2c2      	bcs.n	8000c56 <__udivmoddi4+0x222>
 8000cd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000cd4:	443a      	add	r2, r7
 8000cd6:	e7be      	b.n	8000c56 <__udivmoddi4+0x222>
 8000cd8:	45f0      	cmp	r8, lr
 8000cda:	d29d      	bcs.n	8000c18 <__udivmoddi4+0x1e4>
 8000cdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ce0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ce4:	3801      	subs	r0, #1
 8000ce6:	46e1      	mov	r9, ip
 8000ce8:	e796      	b.n	8000c18 <__udivmoddi4+0x1e4>
 8000cea:	eba7 0909 	sub.w	r9, r7, r9
 8000cee:	4449      	add	r1, r9
 8000cf0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cf4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf8:	fb09 f804 	mul.w	r8, r9, r4
 8000cfc:	e7db      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000cfe:	4673      	mov	r3, lr
 8000d00:	e77f      	b.n	8000c02 <__udivmoddi4+0x1ce>
 8000d02:	4650      	mov	r0, sl
 8000d04:	e766      	b.n	8000bd4 <__udivmoddi4+0x1a0>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e6fd      	b.n	8000b06 <__udivmoddi4+0xd2>
 8000d0a:	443b      	add	r3, r7
 8000d0c:	3a02      	subs	r2, #2
 8000d0e:	e733      	b.n	8000b78 <__udivmoddi4+0x144>
 8000d10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d14:	443b      	add	r3, r7
 8000d16:	e71c      	b.n	8000b52 <__udivmoddi4+0x11e>
 8000d18:	4649      	mov	r1, r9
 8000d1a:	e79c      	b.n	8000c56 <__udivmoddi4+0x222>
 8000d1c:	eba1 0109 	sub.w	r1, r1, r9
 8000d20:	46c4      	mov	ip, r8
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fb09 f804 	mul.w	r8, r9, r4
 8000d2a:	e7c4      	b.n	8000cb6 <__udivmoddi4+0x282>

08000d2c <__aeabi_idiv0>:
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <Init_LCD_GPIO>:

//=============================================================================
// GPIO setup 
//=============================================================================
void Init_LCD_GPIO(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;

	  __HAL_RCC_CRC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b45      	ldr	r3, [pc, #276]	@ (8000e50 <Init_LCD_GPIO+0x120>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a44      	ldr	r2, [pc, #272]	@ (8000e50 <Init_LCD_GPIO+0x120>)
 8000d40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b42      	ldr	r3, [pc, #264]	@ (8000e50 <Init_LCD_GPIO+0x120>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b3e      	ldr	r3, [pc, #248]	@ (8000e50 <Init_LCD_GPIO+0x120>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e50 <Init_LCD_GPIO+0x120>)
 8000d5c:	f043 0310 	orr.w	r3, r3, #16
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b3b      	ldr	r3, [pc, #236]	@ (8000e50 <Init_LCD_GPIO+0x120>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	4b37      	ldr	r3, [pc, #220]	@ (8000e50 <Init_LCD_GPIO+0x120>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a36      	ldr	r2, [pc, #216]	@ (8000e50 <Init_LCD_GPIO+0x120>)
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b34      	ldr	r3, [pc, #208]	@ (8000e50 <Init_LCD_GPIO+0x120>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0320 	and.w	r3, r3, #32
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b30      	ldr	r3, [pc, #192]	@ (8000e50 <Init_LCD_GPIO+0x120>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a2f      	ldr	r2, [pc, #188]	@ (8000e50 <Init_LCD_GPIO+0x120>)
 8000d94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e50 <Init_LCD_GPIO+0x120>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]


	  HAL_GPIO_WritePin(GDISP_CMD_PORT, GCMD, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000dac:	4829      	ldr	r0, [pc, #164]	@ (8000e54 <Init_LCD_GPIO+0x124>)
 8000dae:	f001 fd25 	bl	80027fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_LO_PORT, GDATA_LO, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	21ff      	movs	r1, #255	@ 0xff
 8000db6:	4828      	ldr	r0, [pc, #160]	@ (8000e58 <Init_LCD_GPIO+0x128>)
 8000db8:	f001 fd20 	bl	80027fc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GDISP_DATA_HI_PORT, GDATA_HI, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8000dc2:	4826      	ldr	r0, [pc, #152]	@ (8000e5c <Init_LCD_GPIO+0x12c>)
 8000dc4:	f001 fd1a 	bl	80027fc <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GCMD;
 8000dc8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000dcc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GDISP_CMD_PORT, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	481c      	ldr	r0, [pc, #112]	@ (8000e54 <Init_LCD_GPIO+0x124>)
 8000de2:	f001 fb57 	bl	8002494 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_LO;
 8000de6:	23ff      	movs	r3, #255	@ 0xff
 8000de8:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GDISP_DATA_LO_PORT, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4816      	ldr	r0, [pc, #88]	@ (8000e58 <Init_LCD_GPIO+0x128>)
 8000dfe:	f001 fb49 	bl	8002494 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GDATA_HI;
 8000e02:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000e06:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	623b      	str	r3, [r7, #32]
	  HAL_GPIO_Init(GDISP_DATA_HI_PORT, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4810      	ldr	r0, [pc, #64]	@ (8000e5c <Init_LCD_GPIO+0x12c>)
 8000e1c:	f001 fb3a 	bl	8002494 <HAL_GPIO_Init>

	  SET_CS; SET_WR; SET_RD; SET_DC; SET_RST;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <Init_LCD_GPIO+0x124>)
 8000e22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e26:	619a      	str	r2, [r3, #24]
 8000e28:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <Init_LCD_GPIO+0x124>)
 8000e2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e2e:	619a      	str	r2, [r3, #24]
 8000e30:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <Init_LCD_GPIO+0x124>)
 8000e32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e36:	619a      	str	r2, [r3, #24]
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <Init_LCD_GPIO+0x124>)
 8000e3a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e3e:	619a      	str	r2, [r3, #24]
 8000e40:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <Init_LCD_GPIO+0x124>)
 8000e42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e46:	619a      	str	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	3728      	adds	r7, #40	@ 0x28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40021400 	.word	0x40021400
 8000e58:	40021800 	.word	0x40021800
 8000e5c:	40021000 	.word	0x40021000

08000e60 <SSD1963_WriteCommand>:
//=============================================================================
// Write command to display
//=============================================================================
void SSD1963_WriteCommand(uint16_t Data)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
	uint16_t _Data=~Data;
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	81fb      	strh	r3, [r7, #14]

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8000e70:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <SSD1963_WriteCommand+0x70>)
 8000e72:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8000e76:	619a      	str	r2, [r3, #24]

	CLR_CS;
 8000e78:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <SSD1963_WriteCommand+0x74>)
 8000e7a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000e7e:	619a      	str	r2, [r3, #24]
	CLR_DC;
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <SSD1963_WriteCommand+0x74>)
 8000e82:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000e86:	619a      	str	r2, [r3, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8000e88:	89fb      	ldrh	r3, [r7, #14]
 8000e8a:	041b      	lsls	r3, r3, #16
 8000e8c:	f403 027f 	and.w	r2, r3, #16711680	@ 0xff0000
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4910      	ldr	r1, [pc, #64]	@ (8000ed8 <SSD1963_WriteCommand+0x78>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	618b      	str	r3, [r1, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <SSD1963_WriteCommand+0x70>)
 8000e9c:	695a      	ldr	r2, [r3, #20]
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000ea4:	490a      	ldr	r1, [pc, #40]	@ (8000ed0 <SSD1963_WriteCommand+0x70>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	614b      	str	r3, [r1, #20]
	writeStrobe;
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <SSD1963_WriteCommand+0x74>)
 8000eac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000eb0:	619a      	str	r2, [r3, #24]
 8000eb2:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <SSD1963_WriteCommand+0x74>)
 8000eb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000eb8:	619a      	str	r2, [r3, #24]
	SET_CS;
 8000eba:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <SSD1963_WriteCommand+0x74>)
 8000ebc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ec0:	619a      	str	r2, [r3, #24]
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40021400 	.word	0x40021400
 8000ed8:	40021800 	.word	0x40021800

08000edc <SSD1963_WriteData>:
//=============================================================================
// Write data to display
//=============================================================================

void SSD1963_WriteData(uint16_t Data)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
	uint16_t _Data=~Data;
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	81fb      	strh	r3, [r7, #14]

	GDISP_DATA_HI_PORT->BSRR=(uint32_t)(0xFF00)<<16;
 8000eec:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <SSD1963_WriteData+0x70>)
 8000eee:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8000ef2:	619a      	str	r2, [r3, #24]

	CLR_CS;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <SSD1963_WriteData+0x74>)
 8000ef6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000efa:	619a      	str	r2, [r3, #24]
	SET_DC;
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <SSD1963_WriteData+0x74>)
 8000efe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f02:	619a      	str	r2, [r3, #24]
	GDISP_DATA_LO_PORT->BSRR=((uint32_t)(_Data & GDATA_LO)<<16)|(Data & GDATA_LO);
 8000f04:	89fb      	ldrh	r3, [r7, #14]
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	f403 027f 	and.w	r2, r3, #16711680	@ 0xff0000
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4910      	ldr	r1, [pc, #64]	@ (8000f54 <SSD1963_WriteData+0x78>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	618b      	str	r3, [r1, #24]
	GDISP_DATA_HI_PORT->ODR|=(Data & GDATA_HI);
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <SSD1963_WriteData+0x70>)
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000f20:	490a      	ldr	r1, [pc, #40]	@ (8000f4c <SSD1963_WriteData+0x70>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	614b      	str	r3, [r1, #20]
	writeStrobe;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <SSD1963_WriteData+0x74>)
 8000f28:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f2c:	619a      	str	r2, [r3, #24]
 8000f2e:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <SSD1963_WriteData+0x74>)
 8000f30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f34:	619a      	str	r2, [r3, #24]
	SET_CS;
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <SSD1963_WriteData+0x74>)
 8000f38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f3c:	619a      	str	r2, [r3, #24]

}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40021400 	.word	0x40021400
 8000f54:	40021800 	.word	0x40021800

08000f58 <SSD1963_Init>:
//=============================================================================
// Display initialization
//=============================================================================

void SSD1963_Init (void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	CLR_RST;  // reset
 8000f5c:	4b54      	ldr	r3, [pc, #336]	@ (80010b0 <SSD1963_Init+0x158>)
 8000f5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f62:	619a      	str	r2, [r3, #24]
	HAL_Delay(500);
 8000f64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f68:	f001 f98a 	bl	8002280 <HAL_Delay>
	SET_RST;
 8000f6c:	4b50      	ldr	r3, [pc, #320]	@ (80010b0 <SSD1963_Init+0x158>)
 8000f6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f72:	619a      	str	r2, [r3, #24]
	HAL_Delay(100);
 8000f74:	2064      	movs	r0, #100	@ 0x64
 8000f76:	f001 f983 	bl	8002280 <HAL_Delay>

	SSD1963_WriteCommand(SSD1963_SOFT_RESET);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff ff70 	bl	8000e60 <SSD1963_WriteCommand>
	HAL_Delay(10);
 8000f80:	200a      	movs	r0, #10
 8000f82:	f001 f97d 	bl	8002280 <HAL_Delay>
	SSD1963_WriteCommand(SSD1963_SET_PLL_MN);
 8000f86:	20e2      	movs	r0, #226	@ 0xe2
 8000f88:	f7ff ff6a 	bl	8000e60 <SSD1963_WriteCommand>
	SSD1963_WriteData(29);	// PLLclk = REFclk * 30 (300MHz)
 8000f8c:	201d      	movs	r0, #29
 8000f8e:	f7ff ffa5 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(2);	// SYSclk = PLLclk / 3  (100MHz)
 8000f92:	2002      	movs	r0, #2
 8000f94:	f7ff ffa2 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(4);  	// dummy
 8000f98:	2004      	movs	r0, #4
 8000f9a:	f7ff ff9f 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_PLL);
 8000f9e:	20e0      	movs	r0, #224	@ 0xe0
 8000fa0:	f7ff ff5e 	bl	8000e60 <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0001);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff ff99 	bl	8000edc <SSD1963_WriteData>

	HAL_Delay(100);
 8000faa:	2064      	movs	r0, #100	@ 0x64
 8000fac:	f001 f968 	bl	8002280 <HAL_Delay>

	SSD1963_WriteCommand(SSD1963_SET_PLL);
 8000fb0:	20e0      	movs	r0, #224	@ 0xe0
 8000fb2:	f7ff ff55 	bl	8000e60 <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0003);
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	f7ff ff90 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_LCD_MODE);
 8000fbc:	20b0      	movs	r0, #176	@ 0xb0
 8000fbe:	f7ff ff4f 	bl	8000e60 <SSD1963_WriteCommand>
	SSD1963_WriteData(0x0020);
 8000fc2:	2020      	movs	r0, #32
 8000fc4:	f7ff ff8a 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ff87 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_WIDTH-1)));
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff ff84 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_WIDTH-1)));
 8000fd4:	20df      	movs	r0, #223	@ 0xdf
 8000fd6:	f7ff ff81 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_HEIGHT-1)));
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f7ff ff7e 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_HEIGHT-1)));
 8000fe0:	200f      	movs	r0, #15
 8000fe2:	f7ff ff7b 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff ff78 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_PIXEL_DATA_INTERFACE);
 8000fec:	20f0      	movs	r0, #240	@ 0xf0
 8000fee:	f7ff ff37 	bl	8000e60 <SSD1963_WriteCommand>
	SSD1963_WriteData(SSD1963_PDI_16BIT565);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f7ff ff72 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_LSHIFT_FREQ);
 8000ff8:	20e6      	movs	r0, #230	@ 0xe6
 8000ffa:	f7ff ff31 	bl	8000e60 <SSD1963_WriteCommand>
	SSD1963_WriteData((LCD_FPR >> 16) & 0x00FF);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f7ff ff6c 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData((LCD_FPR >> 8) & 0x00FF);
 8001004:	2075      	movs	r0, #117	@ 0x75
 8001006:	f7ff ff69 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(LCD_FPR & 0x00FF);
 800100a:	20ed      	movs	r0, #237	@ 0xed
 800100c:	f7ff ff66 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_HORI_PERIOD);
 8001010:	20b4      	movs	r0, #180	@ 0xb4
 8001012:	f7ff ff25 	bl	8000e60 <SSD1963_WriteCommand>
	SSD1963_WriteData(mHIGH(TFT_HSYNC_PERIOD));
 8001016:	2002      	movs	r0, #2
 8001018:	f7ff ff60 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mLOW(TFT_HSYNC_PERIOD));
 800101c:	2014      	movs	r0, #20
 800101e:	f7ff ff5d 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_HSYNC_PULSE + TFT_HSYNC_BACK_PORCH)));
 8001022:	2000      	movs	r0, #0
 8001024:	f7ff ff5a 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_HSYNC_PULSE + TFT_HSYNC_BACK_PORCH)));
 8001028:	202c      	movs	r0, #44	@ 0x2c
 800102a:	f7ff ff57 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(TFT_HSYNC_PULSE);
 800102e:	2002      	movs	r0, #2
 8001030:	f7ff ff54 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff ff51 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff ff4e 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff ff4b 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_VERT_PERIOD);
 8001046:	20b6      	movs	r0, #182	@ 0xb6
 8001048:	f7ff ff0a 	bl	8000e60 <SSD1963_WriteCommand>
	SSD1963_WriteData(mHIGH(TFT_VSYNC_PERIOD));
 800104c:	2001      	movs	r0, #1
 800104e:	f7ff ff45 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mLOW(TFT_VSYNC_PERIOD));
 8001052:	201e      	movs	r0, #30
 8001054:	f7ff ff42 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mHIGH((TFT_VSYNC_PULSE + TFT_VSYNC_BACK_PORCH)));
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff ff3f 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(mLOW((TFT_VSYNC_PULSE + TFT_VSYNC_BACK_PORCH)));
 800105e:	200c      	movs	r0, #12
 8001060:	f7ff ff3c 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(TFT_VSYNC_PULSE);
 8001064:	2006      	movs	r0, #6
 8001066:	f7ff ff39 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 800106a:	2000      	movs	r0, #0
 800106c:	f7ff ff36 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff ff33 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_DISPLAY_ON);//SET display on
 8001076:	2029      	movs	r0, #41	@ 0x29
 8001078:	f7ff fef2 	bl	8000e60 <SSD1963_WriteCommand>

	HAL_Delay(10);
 800107c:	200a      	movs	r0, #10
 800107e:	f001 f8ff 	bl	8002280 <HAL_Delay>
	SSD1963_WriteCommand(SSD1963_SET_PWM_CONF); //set PWM for Backlight. Manual p.53
 8001082:	20be      	movs	r0, #190	@ 0xbe
 8001084:	f7ff feec 	bl	8000e60 <SSD1963_WriteCommand>
	// 6 parameters to be set
	SSD1963_WriteData(0x0004); 					// PWM Freq =100MHz/(256*(PWMF[7:0]+1))/256  PWMF[7:0]=4 PWM Freq=305Hz
 8001088:	2004      	movs	r0, #4
 800108a:	f7ff ff27 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x00C0); 					// PWM duty cycle(50%)
 800108e:	20c0      	movs	r0, #192	@ 0xc0
 8001090:	f7ff ff24 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0001); 					// PWM controlled by host, PWM enabled
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff21 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0040); 					// brightness level 0x00 - 0xFF
 800109a:	2040      	movs	r0, #64	@ 0x40
 800109c:	f7ff ff1e 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000); 					// minimum brightness level =  0x00 - 0xFF
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff ff1b 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);					// brightness prescalar 0x0 - 0xF
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff ff18 	bl	8000edc <SSD1963_WriteData>


}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021400 	.word	0x40021400

080010b4 <SSD1963_SetArea>:
//=============================================================================
// Selects screen area
//=============================================================================
void SSD1963_SetArea(uint16_t sx, uint16_t ex, uint16_t sy, uint16_t ey)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4604      	mov	r4, r0
 80010bc:	4608      	mov	r0, r1
 80010be:	4611      	mov	r1, r2
 80010c0:	461a      	mov	r2, r3
 80010c2:	4623      	mov	r3, r4
 80010c4:	80fb      	strh	r3, [r7, #6]
 80010c6:	4603      	mov	r3, r0
 80010c8:	80bb      	strh	r3, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	807b      	strh	r3, [r7, #2]
 80010ce:	4613      	mov	r3, r2
 80010d0:	803b      	strh	r3, [r7, #0]
	SSD1963_WriteCommand(SSD1963_SET_COLUMN_ADDRESS);
 80010d2:	202a      	movs	r0, #42	@ 0x2a
 80010d4:	f7ff fec4 	bl	8000e60 <SSD1963_WriteCommand>
	SSD1963_WriteData((sx >> 8) & 0xFF);
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fefc 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData((sx >> 0) & 0xFF);
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fef6 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData((ex >> 8) & 0xFF);
 80010f0:	88bb      	ldrh	r3, [r7, #4]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fef0 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData((ex >> 0) & 0xFF);
 80010fc:	88bb      	ldrh	r3, [r7, #4]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff feea 	bl	8000edc <SSD1963_WriteData>

	SSD1963_WriteCommand(SSD1963_SET_PAGE_ADDRESS);
 8001108:	202b      	movs	r0, #43	@ 0x2b
 800110a:	f7ff fea9 	bl	8000e60 <SSD1963_WriteCommand>
	SSD1963_WriteData((sy >> 8) & 0xFF);
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	b29b      	uxth	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fee1 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData((sy >> 0) & 0xFF);
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fedb 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData((ey >> 8) & 0xFF);
 8001126:	883b      	ldrh	r3, [r7, #0]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fed5 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData((ey >> 0) & 0xFF);
 8001132:	883b      	ldrh	r3, [r7, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	b29b      	uxth	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fecf 	bl	8000edc <SSD1963_WriteData>
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}

08001146 <SSD1963_FillArea>:
//=============================================================================
// Fill area with specified color
//=============================================================================
void SSD1963_FillArea(uint16_t sx, uint16_t ex, uint16_t sy, uint16_t ey, uint16_t color)
{
 8001146:	b590      	push	{r4, r7, lr}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	4604      	mov	r4, r0
 800114e:	4608      	mov	r0, r1
 8001150:	4611      	mov	r1, r2
 8001152:	461a      	mov	r2, r3
 8001154:	4623      	mov	r3, r4
 8001156:	80fb      	strh	r3, [r7, #6]
 8001158:	4603      	mov	r3, r0
 800115a:	80bb      	strh	r3, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	803b      	strh	r3, [r7, #0]
	uint16_t i;
	SSD1963_SetArea(sx, ex, sy, ey);
 8001164:	883b      	ldrh	r3, [r7, #0]
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	88b9      	ldrh	r1, [r7, #4]
 800116a:	88f8      	ldrh	r0, [r7, #6]
 800116c:	f7ff ffa2 	bl	80010b4 <SSD1963_SetArea>
	SSD1963_WriteCommand(SSD1963_WRITE_MEMORY_START);
 8001170:	202c      	movs	r0, #44	@ 0x2c
 8001172:	f7ff fe75 	bl	8000e60 <SSD1963_WriteCommand>
	for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 8001176:	2300      	movs	r3, #0
 8001178:	81fb      	strh	r3, [r7, #14]
 800117a:	e006      	b.n	800118a <SSD1963_FillArea+0x44>
	{
		SSD1963_WriteData(color);
 800117c:	8c3b      	ldrh	r3, [r7, #32]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff feac 	bl	8000edc <SSD1963_WriteData>
	for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 8001184:	89fb      	ldrh	r3, [r7, #14]
 8001186:	3301      	adds	r3, #1
 8001188:	81fb      	strh	r3, [r7, #14]
 800118a:	89fa      	ldrh	r2, [r7, #14]
 800118c:	88b9      	ldrh	r1, [r7, #4]
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	1acb      	subs	r3, r1, r3
 8001192:	3301      	adds	r3, #1
 8001194:	8838      	ldrh	r0, [r7, #0]
 8001196:	8879      	ldrh	r1, [r7, #2]
 8001198:	1a41      	subs	r1, r0, r1
 800119a:	3101      	adds	r1, #1
 800119c:	fb01 f303 	mul.w	r3, r1, r3
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbeb      	blt.n	800117c <SSD1963_FillArea+0x36>
	}
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd90      	pop	{r4, r7, pc}

080011ae <SSD1963_ClearScreen>:
//=============================================================================
// Fills entire screen with specified color
//=============================================================================
void SSD1963_ClearScreen(uint16_t color)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	80fb      	strh	r3, [r7, #6]
	uint16_t x,y;
	SSD1963_SetArea(0, TFT_WIDTH-1 , 0, TFT_HEIGHT-1);
 80011b8:	f240 130f 	movw	r3, #271	@ 0x10f
 80011bc:	2200      	movs	r2, #0
 80011be:	f240 11df 	movw	r1, #479	@ 0x1df
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff ff76 	bl	80010b4 <SSD1963_SetArea>
	SSD1963_WriteCommand(SSD1963_WRITE_MEMORY_START);
 80011c8:	202c      	movs	r0, #44	@ 0x2c
 80011ca:	f7ff fe49 	bl	8000e60 <SSD1963_WriteCommand>
	for(x=0;x<TFT_WIDTH;x++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	81fb      	strh	r3, [r7, #14]
 80011d2:	e010      	b.n	80011f6 <SSD1963_ClearScreen+0x48>
	{
        for(y= 0;y<TFT_HEIGHT;y++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	81bb      	strh	r3, [r7, #12]
 80011d8:	e006      	b.n	80011e8 <SSD1963_ClearScreen+0x3a>
                {
                SSD1963_WriteData(color);
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fe7d 	bl	8000edc <SSD1963_WriteData>
        for(y= 0;y<TFT_HEIGHT;y++)
 80011e2:	89bb      	ldrh	r3, [r7, #12]
 80011e4:	3301      	adds	r3, #1
 80011e6:	81bb      	strh	r3, [r7, #12]
 80011e8:	89bb      	ldrh	r3, [r7, #12]
 80011ea:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 80011ee:	d3f4      	bcc.n	80011da <SSD1963_ClearScreen+0x2c>
	for(x=0;x<TFT_WIDTH;x++)
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	3301      	adds	r3, #1
 80011f4:	81fb      	strh	r3, [r7, #14]
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80011fc:	d3ea      	bcc.n	80011d4 <SSD1963_ClearScreen+0x26>
                }
	}
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <SSD193_SetPixel>:
//=============================================================================
// Sets given pixel with specified color
//=============================================================================
void SSD193_SetPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
 8001212:	460b      	mov	r3, r1
 8001214:	80bb      	strh	r3, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	807b      	strh	r3, [r7, #2]
	SSD1963_SetArea(x, x, y, y);
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	88ba      	ldrh	r2, [r7, #4]
 800121e:	88f9      	ldrh	r1, [r7, #6]
 8001220:	88f8      	ldrh	r0, [r7, #6]
 8001222:	f7ff ff47 	bl	80010b4 <SSD1963_SetArea>
	SSD1963_WriteCommand(0x2c);
 8001226:	202c      	movs	r0, #44	@ 0x2c
 8001228:	f7ff fe1a 	bl	8000e60 <SSD1963_WriteCommand>
	SSD1963_WriteData(color);
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fe54 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteCommand(0x0);
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fe13 	bl	8000e60 <SSD1963_WriteCommand>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <SSD1963_SetBacklight>:
//=============================================================================
// Controls backlight
//=============================================================================
void SSD1963_SetBacklight(uint8_t BL)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
	SSD1963_WriteCommand(SSD1963_SET_PWM_CONF); 		//set PWM for Backlight. Manual p.53
 800124c:	20be      	movs	r0, #190	@ 0xbe
 800124e:	f7ff fe07 	bl	8000e60 <SSD1963_WriteCommand>
	// 6 parameters to be set
	SSD1963_WriteData(0x0004); 							// PWM Freq =100MHz/(256*(PWMF[7:0]+1))/256  PWMF[7:0]=4 PWM Freq=305Hz
 8001252:	2004      	movs	r0, #4
 8001254:	f7ff fe42 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData((uint16_t)BL); 					// PWM duty cycle(50%)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	b29b      	uxth	r3, r3
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fe3d 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0001); 							// PWM controlled by host, PWM enabled
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff fe3a 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0040); 							// brightness level 0x00 - 0xFF
 8001268:	2040      	movs	r0, #64	@ 0x40
 800126a:	f7ff fe37 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000); 							// minimum brightness level =  0x00 - 0xFF
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fe34 	bl	8000edc <SSD1963_WriteData>
	SSD1963_WriteData(0x0000);							// brightness prescalar 0x0 - 0xF
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fe31 	bl	8000edc <SSD1963_WriteData>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <SSD1963_DrawCircle>:
//===============================================================================
#include <math.h>  // required for sqrtf

// Draw filled circle centered at (x0,y0) with given radius and color
void SSD1963_DrawCircle(uint16_t x0, uint16_t y0, uint16_t radius, uint16_t color)
{
 8001282:	b590      	push	{r4, r7, lr}
 8001284:	b093      	sub	sp, #76	@ 0x4c
 8001286:	af02      	add	r7, sp, #8
 8001288:	4604      	mov	r4, r0
 800128a:	4608      	mov	r0, r1
 800128c:	4611      	mov	r1, r2
 800128e:	461a      	mov	r2, r3
 8001290:	4623      	mov	r3, r4
 8001292:	80fb      	strh	r3, [r7, #6]
 8001294:	4603      	mov	r3, r0
 8001296:	80bb      	strh	r3, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	803b      	strh	r3, [r7, #0]
    if (radius == 0) {
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d106      	bne.n	80012b4 <SSD1963_DrawCircle+0x32>
        SSD193_SetPixel(x0, y0, color);
 80012a6:	883a      	ldrh	r2, [r7, #0]
 80012a8:	88b9      	ldrh	r1, [r7, #4]
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ffab 	bl	8001208 <SSD193_SetPixel>
        return;
 80012b2:	e06b      	b.n	800138c <SSD1963_DrawCircle+0x10a>
    }

    int r = (int)radius;
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	633b      	str	r3, [r7, #48]	@ 0x30
    int cx = (int)x0;
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int cy = (int)y0;
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28

    // bounding clamp
    int x_min = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
    int x_max = TFT_WIDTH - 1;
 80012c4:	f240 13df 	movw	r3, #479	@ 0x1df
 80012c8:	623b      	str	r3, [r7, #32]
    int y_min = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
    int y_max = TFT_HEIGHT - 1;
 80012ce:	f240 130f 	movw	r3, #271	@ 0x10f
 80012d2:	61bb      	str	r3, [r7, #24]

    for (int dy = -r; dy <= r; ++dy)
 80012d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012d6:	425b      	negs	r3, r3
 80012d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012da:	e053      	b.n	8001384 <SSD1963_DrawCircle+0x102>
    {
        int yy = cy + dy;
 80012dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012e0:	4413      	add	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
        if (yy < y_min || yy > y_max) continue;
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	db45      	blt.n	8001378 <SSD1963_DrawCircle+0xf6>
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dc41      	bgt.n	8001378 <SSD1963_DrawCircle+0xf6>

        // compute half width for current scanline
        float fx = sqrtf((float)(r * r - dy * dy));
 80012f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012f6:	fb03 f203 	mul.w	r2, r3, r3
 80012fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012fc:	fb03 f303 	mul.w	r3, r3, r3
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130a:	eeb0 0a67 	vmov.f32	s0, s15
 800130e:	f004 f857 	bl	80053c0 <sqrtf>
 8001312:	ed87 0a04 	vstr	s0, [r7, #16]
        int half = (int)fx;
 8001316:	edd7 7a04 	vldr	s15, [r7, #16]
 800131a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131e:	ee17 3a90 	vmov	r3, s15
 8001322:	60fb      	str	r3, [r7, #12]

        int sx = cx - half;
 8001324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	63bb      	str	r3, [r7, #56]	@ 0x38
        int ex = cx + half;
 800132c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	637b      	str	r3, [r7, #52]	@ 0x34

        if (ex < x_min || sx > x_max) continue; // completely outside
 8001334:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	429a      	cmp	r2, r3
 800133a:	db1f      	blt.n	800137c <SSD1963_DrawCircle+0xfa>
 800133c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	429a      	cmp	r2, r3
 8001342:	dc1b      	bgt.n	800137c <SSD1963_DrawCircle+0xfa>

        if (sx < x_min) sx = x_min;
 8001344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	429a      	cmp	r2, r3
 800134a:	da01      	bge.n	8001350 <SSD1963_DrawCircle+0xce>
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (ex > x_max) ex = x_max;
 8001350:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	429a      	cmp	r2, r3
 8001356:	dd01      	ble.n	800135c <SSD1963_DrawCircle+0xda>
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	637b      	str	r3, [r7, #52]	@ 0x34

        SSD1963_FillArea((uint16_t)sx, (uint16_t)ex, (uint16_t)yy, (uint16_t)yy, color);
 800135c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800135e:	b298      	uxth	r0, r3
 8001360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001362:	b299      	uxth	r1, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	b29a      	uxth	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	b29c      	uxth	r4, r3
 800136c:	883b      	ldrh	r3, [r7, #0]
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	4623      	mov	r3, r4
 8001372:	f7ff fee8 	bl	8001146 <SSD1963_FillArea>
 8001376:	e002      	b.n	800137e <SSD1963_DrawCircle+0xfc>
        if (yy < y_min || yy > y_max) continue;
 8001378:	bf00      	nop
 800137a:	e000      	b.n	800137e <SSD1963_DrawCircle+0xfc>
        if (ex < x_min || sx > x_max) continue; // completely outside
 800137c:	bf00      	nop
    for (int dy = -r; dy <= r; ++dy)
 800137e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001380:	3301      	adds	r3, #1
 8001382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001384:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001388:	429a      	cmp	r2, r3
 800138a:	dda7      	ble.n	80012dc <SSD1963_DrawCircle+0x5a>
    }
}
 800138c:	3744      	adds	r7, #68	@ 0x44
 800138e:	46bd      	mov	sp, r7
 8001390:	bd90      	pop	{r4, r7, pc}
	...

08001394 <Init_TOUCH_GPIO>:

I2C_HandleTypeDef hi2c;


void Init_TOUCH_GPIO(I2C_HandleTypeDef i2c_handle)
{
 8001394:	b084      	sub	sp, #16
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
 800139a:	f107 0c08 	add.w	ip, r7, #8
 800139e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=i2c_handle;
 80013a2:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <Init_TOUCH_GPIO+0x2c>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	2254      	movs	r2, #84	@ 0x54
 80013ac:	4619      	mov	r1, r3
 80013ae:	f003 fff9 	bl	80053a4 <memcpy>
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013ba:	b004      	add	sp, #16
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000080 	.word	0x20000080

080013c4 <STMPE610_IsTouched>:


uint8_t STMPE610_IsTouched(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)!=GPIO_PIN_SET)
 80013c8:	2101      	movs	r1, #1
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <STMPE610_IsTouched+0x1c>)
 80013cc:	f001 f9fe 	bl	80027cc <HAL_GPIO_ReadPin>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <STMPE610_IsTouched+0x16>
		return TRUE;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <STMPE610_IsTouched+0x18>
	else
		return FALSE;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40020000 	.word	0x40020000

080013e4 <STMPE610_Write>:


void STMPE610_Write(uint8_t reg, uint8_t val)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	4603      	mov	r3, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71bb      	strb	r3, [r7, #6]
	uint8_t	txbuf[2];

	txbuf[0]=reg;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	733b      	strb	r3, [r7, #12]
	txbuf[1]=val;
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	737b      	strb	r3, [r7, #13]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, (uint8_t *)txbuf, 2, STMPE610_TIMEOUT)!= HAL_OK);
 80013fc:	bf00      	nop
 80013fe:	f107 020c 	add.w	r2, r7, #12
 8001402:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2302      	movs	r3, #2
 800140a:	2188      	movs	r1, #136	@ 0x88
 800140c:	4805      	ldr	r0, [pc, #20]	@ (8001424 <STMPE610_Write+0x40>)
 800140e:	f001 fb53 	bl	8002ab8 <HAL_I2C_Master_Transmit>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f2      	bne.n	80013fe <STMPE610_Write+0x1a>
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000080 	.word	0x20000080

08001428 <STMPE610_ReadByte>:

uint8_t STMPE610_ReadByte(uint8_t reg)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af02      	add	r7, sp, #8
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	uint8_t rxbuf[1];
	rxbuf[0] = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	733b      	strb	r3, [r7, #12]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, &reg, 1, STMPE610_TIMEOUT)!= HAL_OK);
 8001436:	bf00      	nop
 8001438:	1dfa      	adds	r2, r7, #7
 800143a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	2188      	movs	r1, #136	@ 0x88
 8001444:	480c      	ldr	r0, [pc, #48]	@ (8001478 <STMPE610_ReadByte+0x50>)
 8001446:	f001 fb37 	bl	8002ab8 <HAL_I2C_Master_Transmit>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f3      	bne.n	8001438 <STMPE610_ReadByte+0x10>
	while(HAL_I2C_Master_Receive(&hi2c, STMPE610_ADDR, (uint8_t *)rxbuf, 1, STMPE610_TIMEOUT) != HAL_OK);
 8001450:	bf00      	nop
 8001452:	f107 020c 	add.w	r2, r7, #12
 8001456:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2301      	movs	r3, #1
 800145e:	2188      	movs	r1, #136	@ 0x88
 8001460:	4805      	ldr	r0, [pc, #20]	@ (8001478 <STMPE610_ReadByte+0x50>)
 8001462:	f001 fc27 	bl	8002cb4 <HAL_I2C_Master_Receive>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f2      	bne.n	8001452 <STMPE610_ReadByte+0x2a>

	return rxbuf[0];
 800146c:	7b3b      	ldrb	r3, [r7, #12]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000080 	.word	0x20000080

0800147c <STMPE610_ReadWord>:

uint16_t STMPE610_ReadWord(uint8_t reg)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af02      	add	r7, sp, #8
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	uint8_t	rxbuf[2];
	
	rxbuf[0] = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	733b      	strb	r3, [r7, #12]
	rxbuf[1] = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	737b      	strb	r3, [r7, #13]

	while(HAL_I2C_Master_Transmit(&hi2c, STMPE610_ADDR, &reg, 1, 10000)!= HAL_OK);
 800148e:	bf00      	nop
 8001490:	1dfa      	adds	r2, r7, #7
 8001492:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2301      	movs	r3, #1
 800149a:	2188      	movs	r1, #136	@ 0x88
 800149c:	4810      	ldr	r0, [pc, #64]	@ (80014e0 <STMPE610_ReadWord+0x64>)
 800149e:	f001 fb0b 	bl	8002ab8 <HAL_I2C_Master_Transmit>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f3      	bne.n	8001490 <STMPE610_ReadWord+0x14>
	while(HAL_I2C_Master_Receive(&hi2c, STMPE610_ADDR, (uint8_t *)rxbuf, 2, 10000) != HAL_OK);
 80014a8:	bf00      	nop
 80014aa:	f107 020c 	add.w	r2, r7, #12
 80014ae:	f242 7310 	movw	r3, #10000	@ 0x2710
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2302      	movs	r3, #2
 80014b6:	2188      	movs	r1, #136	@ 0x88
 80014b8:	4809      	ldr	r0, [pc, #36]	@ (80014e0 <STMPE610_ReadWord+0x64>)
 80014ba:	f001 fbfb 	bl	8002cb4 <HAL_I2C_Master_Receive>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f2      	bne.n	80014aa <STMPE610_ReadWord+0x2e>

	return (((uint16_t)rxbuf[0]) << 8) | rxbuf[1];
 80014c4:	7b3b      	ldrb	r3, [r7, #12]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	7b7b      	ldrb	r3, [r7, #13]
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	b29b      	uxth	r3, r3
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000080 	.word	0x20000080

080014e4 <STMPE610_Init>:

void STMPE610_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	STMPE610_Write(STMPE610_REG_SYS_CTRL1, 0x02);		// Software chip reset
 80014e8:	2102      	movs	r1, #2
 80014ea:	2003      	movs	r0, #3
 80014ec:	f7ff ff7a 	bl	80013e4 <STMPE610_Write>
	HAL_Delay(10);
 80014f0:	200a      	movs	r0, #10
 80014f2:	f000 fec5 	bl	8002280 <HAL_Delay>
	
	STMPE610_Write(STMPE610_REG_SYS_CTRL2, 0x04);		// Temperature sensor clock off, GPIO clock off, touch clock on, ADC clock on
 80014f6:	2104      	movs	r1, #4
 80014f8:	2004      	movs	r0, #4
 80014fa:	f7ff ff73 	bl	80013e4 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_EN, 0x03);			// Interrupt on INT pin when there is a sample or a touch transition.
 80014fe:	2103      	movs	r1, #3
 8001500:	200a      	movs	r0, #10
 8001502:	f7ff ff6f 	bl	80013e4 <STMPE610_Write>
	//STMPE610_write_reg(STMPE610_REG_INT_EN, 0x00);						// Don't Interrupt on INT pin
	STMPE610_Write(STMPE610_REG_ADC_CTRL1, 0x48);		// ADC conversion time = 80 clock ticks, 12-bit ADC, internal voltage refernce
 8001506:	2148      	movs	r1, #72	@ 0x48
 8001508:	2020      	movs	r0, #32
 800150a:	f7ff ff6b 	bl	80013e4 <STMPE610_Write>
	HAL_Delay(2);
 800150e:	2002      	movs	r0, #2
 8001510:	f000 feb6 	bl	8002280 <HAL_Delay>
	
	STMPE610_Write(STMPE610_REG_ADC_CTRL2, 0x01);		// ADC speed 3.25MHz
 8001514:	2101      	movs	r1, #1
 8001516:	2021      	movs	r0, #33	@ 0x21
 8001518:	f7ff ff64 	bl	80013e4 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_GPIO_AF, 0x00);			// GPIO alternate function - OFF
 800151c:	2100      	movs	r1, #0
 800151e:	2017      	movs	r0, #23
 8001520:	f7ff ff60 	bl	80013e4 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_CFG, 0xA3);			// Averaging 4, touch detect delay 1ms, panel driver settling time 1ms
 8001524:	21a3      	movs	r1, #163	@ 0xa3
 8001526:	2041      	movs	r0, #65	@ 0x41
 8001528:	f7ff ff5c 	bl	80013e4 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_TH, 0x01);			// FIFO threshold = 1
 800152c:	2101      	movs	r1, #1
 800152e:	204a      	movs	r0, #74	@ 0x4a
 8001530:	f7ff ff58 	bl	80013e4 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x01);			// FIFO reset enable
 8001534:	2101      	movs	r1, #1
 8001536:	204b      	movs	r0, #75	@ 0x4b
 8001538:	f7ff ff54 	bl	80013e4 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x00);			// FIFO reset disable
 800153c:	2100      	movs	r1, #0
 800153e:	204b      	movs	r0, #75	@ 0x4b
 8001540:	f7ff ff50 	bl	80013e4 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_FRACT_XYZ, 0x07);	// Z axis data format
 8001544:	2107      	movs	r1, #7
 8001546:	2056      	movs	r0, #86	@ 0x56
 8001548:	f7ff ff4c 	bl	80013e4 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_I_DRIVE, 0x01);		// max 50mA touchscreen line current
 800154c:	2101      	movs	r1, #1
 800154e:	2058      	movs	r0, #88	@ 0x58
 8001550:	f7ff ff48 	bl	80013e4 <STMPE610_Write>

	STMPE610_Write(STMPE610_REG_TSC_CTRL, 0x30);			// X&Y&Z, 16 reading window
 8001554:	2130      	movs	r1, #48	@ 0x30
 8001556:	2040      	movs	r0, #64	@ 0x40
 8001558:	f7ff ff44 	bl	80013e4 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_TSC_CTRL, 0x31);			// X&Y&Z, 16 reading window, TSC enable
 800155c:	2131      	movs	r1, #49	@ 0x31
 800155e:	2040      	movs	r0, #64	@ 0x40
 8001560:	f7ff ff40 	bl	80013e4 <STMPE610_Write>
	//STMPE610_write_reg(STMPE610_REG_TSC_CTRL, 0x32);						// X&Y, 16 reading window
	//STMPE610_write_reg(TMPE610_REG_TSC_CTRL, 0x33);						// X&Y, 16 reading window, TSC enable

	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);		// Clear all interrupts
 8001564:	21ff      	movs	r1, #255	@ 0xff
 8001566:	200b      	movs	r0, #11
 8001568:	f7ff ff3c 	bl	80013e4 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_CTRL, 0x01);		// Level interrupt, enable interrupts
 800156c:	2101      	movs	r1, #1
 800156e:	2009      	movs	r0, #9
 8001570:	f7ff ff38 	bl	80013e4 <STMPE610_Write>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <STMPE610_read_xyz>:

uint8_t STMPE610_read_xyz(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
	uint8_t	status;

	// Is there something in the fifo
	status = STMPE610_ReadByte(STMPE610_REG_FIFO_STA);
 800157e:	204b      	movs	r0, #75	@ 0x4b
 8001580:	f7ff ff52 	bl	8001428 <STMPE610_ReadByte>
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
	if ((status & 0x20))
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	2b00      	cmp	r3, #0
 8001590:	d017      	beq.n	80015c2 <STMPE610_read_xyz+0x4a>
	{
		STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);
 8001592:	21ff      	movs	r1, #255	@ 0xff
 8001594:	200b      	movs	r0, #11
 8001596:	f7ff ff25 	bl	80013e4 <STMPE610_Write>
		if (!(STMPE610_ReadByte(STMPE610_REG_TSC_CTRL) & 0x80))
 800159a:	2040      	movs	r0, #64	@ 0x40
 800159c:	f7ff ff44 	bl	8001428 <STMPE610_ReadByte>
 80015a0:	4603      	mov	r3, r0
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <STMPE610_read_xyz+0x46>
		{
			x=0;
 80015a8:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <STMPE610_read_xyz+0x98>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	801a      	strh	r2, [r3, #0]
			y=0;
 80015ae:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <STMPE610_read_xyz+0x9c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	801a      	strh	r2, [r3, #0]
			z=0;
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <STMPE610_read_xyz+0xa0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	801a      	strh	r2, [r3, #0]
			return TRUE;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e023      	b.n	8001606 <STMPE610_read_xyz+0x8e>
		}
		return FALSE;
 80015be:	2300      	movs	r3, #0
 80015c0:	e021      	b.n	8001606 <STMPE610_read_xyz+0x8e>
	}

	// Time to get some readings
	x = STMPE610_ReadWord(STMPE610_REG_TSC_DATA_X);
 80015c2:	204d      	movs	r0, #77	@ 0x4d
 80015c4:	f7ff ff5a 	bl	800147c <STMPE610_ReadWord>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <STMPE610_read_xyz+0x98>)
 80015ce:	801a      	strh	r2, [r3, #0]
	y = STMPE610_ReadWord(STMPE610_REG_TSC_DATA_Y);
 80015d0:	204f      	movs	r0, #79	@ 0x4f
 80015d2:	f7ff ff53 	bl	800147c <STMPE610_ReadWord>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <STMPE610_read_xyz+0x9c>)
 80015dc:	801a      	strh	r2, [r3, #0]
	z = STMPE610_ReadByte(STMPE610_REG_TSC_DATA_Z);
 80015de:	2051      	movs	r0, #81	@ 0x51
 80015e0:	f7ff ff22 	bl	8001428 <STMPE610_ReadByte>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <STMPE610_read_xyz+0xa0>)
 80015ea:	801a      	strh	r2, [r3, #0]

	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x01);		// FIFO reset enable
 80015ec:	2101      	movs	r1, #1
 80015ee:	204b      	movs	r0, #75	@ 0x4b
 80015f0:	f7ff fef8 	bl	80013e4 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_FIFO_STA, 0x00);		// FIFO reset disable
 80015f4:	2100      	movs	r1, #0
 80015f6:	204b      	movs	r0, #75	@ 0x4b
 80015f8:	f7ff fef4 	bl	80013e4 <STMPE610_Write>
	STMPE610_Write(STMPE610_REG_INT_STA, 0xFF);
 80015fc:	21ff      	movs	r1, #255	@ 0xff
 80015fe:	200b      	movs	r0, #11
 8001600:	f7ff fef0 	bl	80013e4 <STMPE610_Write>

	return TRUE;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000078 	.word	0x20000078
 8001614:	2000007a 	.word	0x2000007a
 8001618:	2000007c 	.word	0x2000007c
 800161c:	00000000 	.word	0x00000000

08001620 <STMPE610_GetX_TOUCH>:

uint16_t STMPE610_GetX_TOUCH(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	float pom=0;
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	607b      	str	r3, [r7, #4]

	pom=(float)x;
 800162c:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <STMPE610_GetX_TOUCH+0x80>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001638:	edc7 7a01 	vstr	s15, [r7, #4]
	pom=480.0*(pom-GUI_TOUCH_AD_LEFT)/(GUI_TOUCH_AD_RIGHT-GUI_TOUCH_AD_LEFT);
 800163c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001640:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80016a4 <STMPE610_GetX_TOUCH+0x84>
 8001644:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001648:	ee17 0a90 	vmov	r0, s15
 800164c:	f7fe ff20 	bl	8000490 <__aeabi_f2d>
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <STMPE610_GetX_TOUCH+0x88>)
 8001656:	f7fe ff73 	bl	8000540 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	a30d      	add	r3, pc, #52	@ (adr r3, 8001698 <STMPE610_GetX_TOUCH+0x78>)
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	f7ff f894 	bl	8000794 <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff f976 	bl	8000964 <__aeabi_d2f>
 8001678:	4603      	mov	r3, r0
 800167a:	607b      	str	r3, [r7, #4]
	return (uint16_t)pom;
 800167c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001684:	ee17 3a90 	vmov	r3, s15
 8001688:	b29b      	uxth	r3, r3
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	f3af 8000 	nop.w
 8001698:	00000000 	.word	0x00000000
 800169c:	40adc400 	.word	0x40adc400
 80016a0:	20000078 	.word	0x20000078
 80016a4:	43120000 	.word	0x43120000
 80016a8:	407e0000 	.word	0x407e0000
 80016ac:	00000000 	.word	0x00000000

080016b0 <STMPE610_GetY_TOUCH>:
uint16_t STMPE610_GetY_TOUCH(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
	float pom=0;
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]

	pom=(float)y;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <STMPE610_GetY_TOUCH+0x80>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c8:	edc7 7a01 	vstr	s15, [r7, #4]
	pom=272.0*(pom-GUI_TOUCH_AD_TOP)/(GUI_TOUCH_AD_BOTTOM-GUI_TOUCH_AD_TOP);
 80016cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001734 <STMPE610_GetY_TOUCH+0x84>
 80016d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016d8:	ee17 0a90 	vmov	r0, s15
 80016dc:	f7fe fed8 	bl	8000490 <__aeabi_f2d>
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <STMPE610_GetY_TOUCH+0x88>)
 80016e6:	f7fe ff2b 	bl	8000540 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	a30d      	add	r3, pc, #52	@ (adr r3, 8001728 <STMPE610_GetY_TOUCH+0x78>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7ff f84c 	bl	8000794 <__aeabi_ddiv>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff f92e 	bl	8000964 <__aeabi_d2f>
 8001708:	4603      	mov	r3, r0
 800170a:	607b      	str	r3, [r7, #4]
	return (uint16_t)pom;
 800170c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001714:	ee17 3a90 	vmov	r3, s15
 8001718:	b29b      	uxth	r3, r3
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	00000000 	.word	0x00000000
 800172c:	40abea00 	.word	0x40abea00
 8001730:	2000007a 	.word	0x2000007a
 8001734:	43870000 	.word	0x43870000
 8001738:	40710000 	.word	0x40710000

0800173c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b095      	sub	sp, #84	@ 0x54
 8001740:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001742:	f000 fd2b 	bl	800219c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001746:	f000 f875 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174a:	f000 fa55 	bl	8001bf8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800174e:	f000 f8d1 	bl	80018f4 <MX_I2C1_Init>
  MX_RTC_Init();
 8001752:	f000 f8fd 	bl	8001950 <MX_RTC_Init>
  MX_SPI2_Init();
 8001756:	f000 f955 	bl	8001a04 <MX_SPI2_Init>
  MX_TIM3_Init();
 800175a:	f000 f989 	bl	8001a70 <MX_TIM3_Init>
  MX_TIM4_Init();
 800175e:	f000 f9d5 	bl	8001b0c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Init_LCD_GPIO();
 8001762:	f7ff fae5 	bl	8000d30 <Init_LCD_GPIO>

    // -------------------------------------------------------------------------
    // 3. Initialize SSD1963 LCD
    // -------------------------------------------------------------------------
    SSD1963_Init();
 8001766:	f7ff fbf7 	bl	8000f58 <SSD1963_Init>
    HAL_Delay(100);
 800176a:	2064      	movs	r0, #100	@ 0x64
 800176c:	f000 fd88 	bl	8002280 <HAL_Delay>

    // -------------------------------------------------------------------------
    // 4. Set backlight to 100%
    // -------------------------------------------------------------------------
    SSD1963_SetBacklight(0xC0); // 0x00 = off, 0xFF = full brightness
 8001770:	20c0      	movs	r0, #192	@ 0xc0
 8001772:	f7ff fd66 	bl	8001242 <SSD1963_SetBacklight>

    // -------------------------------------------------------------------------
    // 5. Clear the screen to black
    // -------------------------------------------------------------------------
    SSD1963_ClearScreen(0x0000); // RGB565 black
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff fd19 	bl	80011ae <SSD1963_ClearScreen>
    Init_TOUCH_GPIO(hi2c1);
 800177c:	4c2c      	ldr	r4, [pc, #176]	@ (8001830 <main+0xf4>)
 800177e:	4668      	mov	r0, sp
 8001780:	f104 0310 	add.w	r3, r4, #16
 8001784:	2244      	movs	r2, #68	@ 0x44
 8001786:	4619      	mov	r1, r3
 8001788:	f003 fe0c 	bl	80053a4 <memcpy>
 800178c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001790:	f7ff fe00 	bl	8001394 <Init_TOUCH_GPIO>
    STMPE610_Init();
 8001794:	f7ff fea6 	bl	80014e4 <STMPE610_Init>

       // Draw sample static UI
       SSD1963_FillArea(0, 479, 0, 40, BLUE);
 8001798:	231f      	movs	r3, #31
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2328      	movs	r3, #40	@ 0x28
 800179e:	2200      	movs	r2, #0
 80017a0:	f240 11df 	movw	r1, #479	@ 0x1df
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff fcce 	bl	8001146 <SSD1963_FillArea>
       SSD1963_FillArea(0, 479, 272 - 40, 272, BLUE);
 80017aa:	231f      	movs	r3, #31
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80017b2:	22e8      	movs	r2, #232	@ 0xe8
 80017b4:	f240 11df 	movw	r1, #479	@ 0x1df
 80017b8:	2000      	movs	r0, #0
 80017ba:	f7ff fcc4 	bl	8001146 <SSD1963_FillArea>
       SSD1963_FillArea(0, 20, 0, 272, BLUE);
 80017be:	231f      	movs	r3, #31
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80017c6:	2200      	movs	r2, #0
 80017c8:	2114      	movs	r1, #20
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff fcbb 	bl	8001146 <SSD1963_FillArea>
       SSD1963_FillArea(479 - 20, 479, 0, 272, BLUE);
 80017d0:	231f      	movs	r3, #31
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80017d8:	2200      	movs	r2, #0
 80017da:	f240 11df 	movw	r1, #479	@ 0x1df
 80017de:	f240 10cb 	movw	r0, #459	@ 0x1cb
 80017e2:	f7ff fcb0 	bl	8001146 <SSD1963_FillArea>


       while (1)
           {
               if (STMPE610_IsTouched())
 80017e6:	f7ff fded 	bl	80013c4 <STMPE610_IsTouched>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d01b      	beq.n	8001828 <main+0xec>
               {
                   if (STMPE610_read_xyz())
 80017f0:	f7ff fec2 	bl	8001578 <STMPE610_read_xyz>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d016      	beq.n	8001828 <main+0xec>
                   {
                       uint16_t tx = STMPE610_GetX_TOUCH();
 80017fa:	f7ff ff11 	bl	8001620 <STMPE610_GetX_TOUCH>
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
                       uint16_t ty = STMPE610_GetY_TOUCH();
 8001802:	f7ff ff55 	bl	80016b0 <STMPE610_GetY_TOUCH>
 8001806:	4603      	mov	r3, r0
 8001808:	80bb      	strh	r3, [r7, #4]

                       // Clamp for safety
                       if (tx < 480 && ty < 272)
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001810:	d20a      	bcs.n	8001828 <main+0xec>
 8001812:	88bb      	ldrh	r3, [r7, #4]
 8001814:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8001818:	d206      	bcs.n	8001828 <main+0xec>
                       {
                           SSD1963_DrawCircle(tx, ty, 5, RED);
 800181a:	88b9      	ldrh	r1, [r7, #4]
 800181c:	88f8      	ldrh	r0, [r7, #6]
 800181e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001822:	2205      	movs	r2, #5
 8001824:	f7ff fd2d 	bl	8001282 <SSD1963_DrawCircle>

                       }
                   }
               }
               HAL_Delay(50);
 8001828:	2032      	movs	r0, #50	@ 0x32
 800182a:	f000 fd29 	bl	8002280 <HAL_Delay>
               if (STMPE610_IsTouched())
 800182e:	e7da      	b.n	80017e6 <main+0xaa>
 8001830:	200000d4 	.word	0x200000d4

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	@ 0x50
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 0320 	add.w	r3, r7, #32
 800183e:	2230      	movs	r2, #48	@ 0x30
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f003 fd7c 	bl	8005340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <SystemClock_Config+0xb8>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	4a22      	ldr	r2, [pc, #136]	@ (80018ec <SystemClock_Config+0xb8>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	@ 0x40
 8001868:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <SystemClock_Config+0xb8>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001874:	2300      	movs	r3, #0
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <SystemClock_Config+0xbc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1c      	ldr	r2, [pc, #112]	@ (80018f0 <SystemClock_Config+0xbc>)
 800187e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <SystemClock_Config+0xbc>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001890:	230a      	movs	r3, #10
 8001892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001894:	2301      	movs	r3, #1
 8001896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001898:	2310      	movs	r3, #16
 800189a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800189c:	2301      	movs	r3, #1
 800189e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	4618      	mov	r0, r3
 80018aa:	f001 ffbb 	bl	8003824 <HAL_RCC_OscConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80018b4:	f000 faac 	bl	8001e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b8:	230f      	movs	r3, #15
 80018ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 fa1e 	bl	8003d14 <HAL_RCC_ClockConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80018de:	f000 fa97 	bl	8001e10 <Error_Handler>
  }
}
 80018e2:	bf00      	nop
 80018e4:	3750      	adds	r7, #80	@ 0x50
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40007000 	.word	0x40007000

080018f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <MX_I2C1_Init+0x50>)
 80018fa:	4a13      	ldr	r2, [pc, #76]	@ (8001948 <MX_I2C1_Init+0x54>)
 80018fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <MX_I2C1_Init+0x50>)
 8001900:	4a12      	ldr	r2, [pc, #72]	@ (800194c <MX_I2C1_Init+0x58>)
 8001902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <MX_I2C1_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <MX_I2C1_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <MX_I2C1_Init+0x50>)
 8001912:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001916:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <MX_I2C1_Init+0x50>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <MX_I2C1_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001924:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <MX_I2C1_Init+0x50>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <MX_I2C1_Init+0x50>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	@ (8001944 <MX_I2C1_Init+0x50>)
 8001932:	f000 ff7d 	bl	8002830 <HAL_I2C_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800193c:	f000 fa68 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200000d4 	.word	0x200000d4
 8001948:	40005400 	.word	0x40005400
 800194c:	000186a0 	.word	0x000186a0

08001950 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001964:	2300      	movs	r3, #0
 8001966:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001968:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <MX_RTC_Init+0xac>)
 800196a:	4a25      	ldr	r2, [pc, #148]	@ (8001a00 <MX_RTC_Init+0xb0>)
 800196c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <MX_RTC_Init+0xac>)
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001974:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <MX_RTC_Init+0xac>)
 8001976:	227f      	movs	r2, #127	@ 0x7f
 8001978:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800197a:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <MX_RTC_Init+0xac>)
 800197c:	22ff      	movs	r2, #255	@ 0xff
 800197e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001980:	4b1e      	ldr	r3, [pc, #120]	@ (80019fc <MX_RTC_Init+0xac>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001986:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <MX_RTC_Init+0xac>)
 8001988:	2200      	movs	r2, #0
 800198a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800198c:	4b1b      	ldr	r3, [pc, #108]	@ (80019fc <MX_RTC_Init+0xac>)
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001992:	481a      	ldr	r0, [pc, #104]	@ (80019fc <MX_RTC_Init+0xac>)
 8001994:	f002 fc6c 	bl	8004270 <HAL_RTC_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800199e:	f000 fa37 	bl	8001e10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	4619      	mov	r1, r3
 80019bc:	480f      	ldr	r0, [pc, #60]	@ (80019fc <MX_RTC_Init+0xac>)
 80019be:	f002 fcd8 	bl	8004372 <HAL_RTC_SetTime>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80019c8:	f000 fa22 	bl	8001e10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019cc:	2301      	movs	r3, #1
 80019ce:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80019d0:	2301      	movs	r3, #1
 80019d2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	2200      	movs	r2, #0
 80019e0:	4619      	mov	r1, r3
 80019e2:	4806      	ldr	r0, [pc, #24]	@ (80019fc <MX_RTC_Init+0xac>)
 80019e4:	f002 fd5f 	bl	80044a6 <HAL_RTC_SetDate>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80019ee:	f000 fa0f 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000128 	.word	0x20000128
 8001a00:	40002800 	.word	0x40002800

08001a04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <MX_SPI2_Init+0x64>)
 8001a0a:	4a18      	ldr	r2, [pc, #96]	@ (8001a6c <MX_SPI2_Init+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a0e:	4b16      	ldr	r3, [pc, #88]	@ (8001a68 <MX_SPI2_Init+0x64>)
 8001a10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a16:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <MX_SPI2_Init+0x64>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <MX_SPI2_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a22:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <MX_SPI2_Init+0x64>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <MX_SPI2_Init+0x64>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <MX_SPI2_Init+0x64>)
 8001a30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <MX_SPI2_Init+0x64>)
 8001a38:	2208      	movs	r2, #8
 8001a3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <MX_SPI2_Init+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <MX_SPI2_Init+0x64>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a48:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <MX_SPI2_Init+0x64>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <MX_SPI2_Init+0x64>)
 8001a50:	220a      	movs	r2, #10
 8001a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a54:	4804      	ldr	r0, [pc, #16]	@ (8001a68 <MX_SPI2_Init+0x64>)
 8001a56:	f002 fe4b 	bl	80046f0 <HAL_SPI_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a60:	f000 f9d6 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000148 	.word	0x20000148
 8001a6c:	40003800 	.word	0x40003800

08001a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <MX_TIM3_Init+0x94>)
 8001a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001b08 <MX_TIM3_Init+0x98>)
 8001a90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 27;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	@ (8001b04 <MX_TIM3_Init+0x94>)
 8001a94:	221b      	movs	r2, #27
 8001a96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <MX_TIM3_Init+0x94>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a9e:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <MX_TIM3_Init+0x94>)
 8001aa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aa4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <MX_TIM3_Init+0x94>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aac:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <MX_TIM3_Init+0x94>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ab2:	4814      	ldr	r0, [pc, #80]	@ (8001b04 <MX_TIM3_Init+0x94>)
 8001ab4:	f002 fea5 	bl	8004802 <HAL_TIM_Base_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001abe:	f000 f9a7 	bl	8001e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	4619      	mov	r1, r3
 8001ace:	480d      	ldr	r0, [pc, #52]	@ (8001b04 <MX_TIM3_Init+0x94>)
 8001ad0:	f003 f802 	bl	8004ad8 <HAL_TIM_ConfigClockSource>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001ada:	f000 f999 	bl	8001e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4806      	ldr	r0, [pc, #24]	@ (8001b04 <MX_TIM3_Init+0x94>)
 8001aec:	f003 fbac 	bl	8005248 <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001af6:	f000 f98b 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200001a0 	.word	0x200001a0
 8001b08:	40000400 	.word	0x40000400

08001b0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08e      	sub	sp, #56	@ 0x38
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b20:	f107 0320 	add.w	r3, r7, #32
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	615a      	str	r2, [r3, #20]
 8001b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf0 <MX_TIM4_Init+0xe4>)
 8001b3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001bf4 <MX_TIM4_Init+0xe8>)
 8001b40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108;
 8001b42:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf0 <MX_TIM4_Init+0xe4>)
 8001b44:	226c      	movs	r2, #108	@ 0x6c
 8001b46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b48:	4b29      	ldr	r3, [pc, #164]	@ (8001bf0 <MX_TIM4_Init+0xe4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b4e:	4b28      	ldr	r3, [pc, #160]	@ (8001bf0 <MX_TIM4_Init+0xe4>)
 8001b50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b56:	4b26      	ldr	r3, [pc, #152]	@ (8001bf0 <MX_TIM4_Init+0xe4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5c:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <MX_TIM4_Init+0xe4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b62:	4823      	ldr	r0, [pc, #140]	@ (8001bf0 <MX_TIM4_Init+0xe4>)
 8001b64:	f002 fe4d 	bl	8004802 <HAL_TIM_Base_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b6e:	f000 f94f 	bl	8001e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	481c      	ldr	r0, [pc, #112]	@ (8001bf0 <MX_TIM4_Init+0xe4>)
 8001b80:	f002 ffaa 	bl	8004ad8 <HAL_TIM_ConfigClockSource>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b8a:	f000 f941 	bl	8001e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b8e:	4818      	ldr	r0, [pc, #96]	@ (8001bf0 <MX_TIM4_Init+0xe4>)
 8001b90:	f002 fe86 	bl	80048a0 <HAL_TIM_PWM_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b9a:	f000 f939 	bl	8001e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ba6:	f107 0320 	add.w	r3, r7, #32
 8001baa:	4619      	mov	r1, r3
 8001bac:	4810      	ldr	r0, [pc, #64]	@ (8001bf0 <MX_TIM4_Init+0xe4>)
 8001bae:	f003 fb4b 	bl	8005248 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001bb8:	f000 f92a 	bl	8001e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bbc:	2360      	movs	r3, #96	@ 0x60
 8001bbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2208      	movs	r2, #8
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4807      	ldr	r0, [pc, #28]	@ (8001bf0 <MX_TIM4_Init+0xe4>)
 8001bd4:	f002 febe 	bl	8004954 <HAL_TIM_PWM_ConfigChannel>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001bde:	f000 f917 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001be2:	4803      	ldr	r0, [pc, #12]	@ (8001bf0 <MX_TIM4_Init+0xe4>)
 8001be4:	f000 fa34 	bl	8002050 <HAL_TIM_MspPostInit>

}
 8001be8:	bf00      	nop
 8001bea:	3738      	adds	r7, #56	@ 0x38
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200001e8 	.word	0x200001e8
 8001bf4:	40000800 	.word	0x40000800

08001bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08e      	sub	sp, #56	@ 0x38
 8001bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
 8001c12:	4b78      	ldr	r3, [pc, #480]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a77      	ldr	r2, [pc, #476]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b75      	ldr	r3, [pc, #468]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	623b      	str	r3, [r7, #32]
 8001c28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	4b71      	ldr	r3, [pc, #452]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	4a70      	ldr	r2, [pc, #448]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3a:	4b6e      	ldr	r3, [pc, #440]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	4a69      	ldr	r2, [pc, #420]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c56:	4b67      	ldr	r3, [pc, #412]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	4b63      	ldr	r3, [pc, #396]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	4a62      	ldr	r2, [pc, #392]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c6c:	f043 0320 	orr.w	r3, r3, #32
 8001c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c72:	4b60      	ldr	r3, [pc, #384]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b5c      	ldr	r3, [pc, #368]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a5b      	ldr	r2, [pc, #364]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b59      	ldr	r3, [pc, #356]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b55      	ldr	r3, [pc, #340]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a54      	ldr	r2, [pc, #336]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b52      	ldr	r3, [pc, #328]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	4b4e      	ldr	r3, [pc, #312]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	4a4d      	ldr	r2, [pc, #308]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b47      	ldr	r3, [pc, #284]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	4a46      	ldr	r2, [pc, #280]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce2:	4b44      	ldr	r3, [pc, #272]	@ (8001df4 <MX_GPIO_Init+0x1fc>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8001cf4:	4840      	ldr	r0, [pc, #256]	@ (8001df8 <MX_GPIO_Init+0x200>)
 8001cf6:	f000 fd81 	bl	80027fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f248 01ff 	movw	r1, #33023	@ 0x80ff
 8001d00:	483e      	ldr	r0, [pc, #248]	@ (8001dfc <MX_GPIO_Init+0x204>)
 8001d02:	f000 fd7b 	bl	80027fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001d06:	2200      	movs	r2, #0
 8001d08:	f64f 7180 	movw	r1, #65408	@ 0xff80
 8001d0c:	483c      	ldr	r0, [pc, #240]	@ (8001e00 <MX_GPIO_Init+0x208>)
 8001d0e:	f000 fd75 	bl	80027fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001d12:	2200      	movs	r2, #0
 8001d14:	f44f 6171 	mov.w	r1, #3856	@ 0xf10
 8001d18:	483a      	ldr	r0, [pc, #232]	@ (8001e04 <MX_GPIO_Init+0x20c>)
 8001d1a:	f000 fd6f 	bl	80027fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2118      	movs	r1, #24
 8001d22:	4839      	ldr	r0, [pc, #228]	@ (8001e08 <MX_GPIO_Init+0x210>)
 8001d24:	f000 fd6a 	bl	80027fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4834      	ldr	r0, [pc, #208]	@ (8001e0c <MX_GPIO_Init+0x214>)
 8001d3c:	f000 fbaa 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001d40:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d56:	4619      	mov	r1, r3
 8001d58:	4827      	ldr	r0, [pc, #156]	@ (8001df8 <MX_GPIO_Init+0x200>)
 8001d5a:	f000 fb9b 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d5e:	f248 03ff 	movw	r3, #33023	@ 0x80ff
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	2301      	movs	r3, #1
 8001d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d74:	4619      	mov	r1, r3
 8001d76:	4821      	ldr	r0, [pc, #132]	@ (8001dfc <MX_GPIO_Init+0x204>)
 8001d78:	f000 fb8c 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001d7c:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d92:	4619      	mov	r1, r3
 8001d94:	481a      	ldr	r0, [pc, #104]	@ (8001e00 <MX_GPIO_Init+0x208>)
 8001d96:	f000 fb7d 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001d9a:	f44f 6371 	mov.w	r3, #3856	@ 0xf10
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db0:	4619      	mov	r1, r3
 8001db2:	4814      	ldr	r0, [pc, #80]	@ (8001e04 <MX_GPIO_Init+0x20c>)
 8001db4:	f000 fb6e 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001db8:	2308      	movs	r3, #8
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480e      	ldr	r0, [pc, #56]	@ (8001e04 <MX_GPIO_Init+0x20c>)
 8001dcc:	f000 fb62 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001dd0:	2318      	movs	r3, #24
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de4:	4619      	mov	r1, r3
 8001de6:	4808      	ldr	r0, [pc, #32]	@ (8001e08 <MX_GPIO_Init+0x210>)
 8001de8:	f000 fb54 	bl	8002494 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dec:	bf00      	nop
 8001dee:	3738      	adds	r7, #56	@ 0x38
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40021400 	.word	0x40021400
 8001dfc:	40021800 	.word	0x40021800
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40020400 	.word	0x40020400
 8001e0c:	40020000 	.word	0x40020000

08001e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e14:	b672      	cpsid	i
}
 8001e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <Error_Handler+0x8>

08001e1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e32:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	4a08      	ldr	r2, [pc, #32]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_MspInit+0x4c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	@ 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a19      	ldr	r2, [pc, #100]	@ (8001ef0 <HAL_I2C_MspInit+0x84>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d12b      	bne.n	8001ee6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <HAL_I2C_MspInit+0x88>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	4a17      	ldr	r2, [pc, #92]	@ (8001ef4 <HAL_I2C_MspInit+0x88>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_I2C_MspInit+0x88>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eaa:	23c0      	movs	r3, #192	@ 0xc0
 8001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eae:	2312      	movs	r3, #18
 8001eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <HAL_I2C_MspInit+0x8c>)
 8001ec6:	f000 fae5 	bl	8002494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <HAL_I2C_MspInit+0x88>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	4a08      	ldr	r2, [pc, #32]	@ (8001ef4 <HAL_I2C_MspInit+0x88>)
 8001ed4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eda:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <HAL_I2C_MspInit+0x88>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3728      	adds	r7, #40	@ 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40005400 	.word	0x40005400
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40020400 	.word	0x40020400

08001efc <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a0c      	ldr	r2, [pc, #48]	@ (8001f48 <HAL_RTC_MspInit+0x4c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d111      	bne.n	8001f40 <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f24:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f26:	f107 0308 	add.w	r3, r7, #8
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f002 f8be 	bl	80040ac <HAL_RCCEx_PeriphCLKConfig>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001f36:	f7ff ff6b 	bl	8001e10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f3a:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <HAL_RTC_MspInit+0x50>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001f40:	bf00      	nop
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40002800 	.word	0x40002800
 8001f4c:	42470e3c 	.word	0x42470e3c

08001f50 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	@ 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a19      	ldr	r2, [pc, #100]	@ (8001fd4 <HAL_SPI_MspInit+0x84>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d12c      	bne.n	8001fcc <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	4a17      	ldr	r2, [pc, #92]	@ (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a10      	ldr	r2, [pc, #64]	@ (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001faa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fbc:	2305      	movs	r3, #5
 8001fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4805      	ldr	r0, [pc, #20]	@ (8001fdc <HAL_SPI_MspInit+0x8c>)
 8001fc8:	f000 fa64 	bl	8002494 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001fcc:	bf00      	nop
 8001fce:	3728      	adds	r7, #40	@ 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40003800 	.word	0x40003800
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020400 	.word	0x40020400

08001fe0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a15      	ldr	r2, [pc, #84]	@ (8002044 <HAL_TIM_Base_MspInit+0x64>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10e      	bne.n	8002010 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_TIM_Base_MspInit+0x68>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	4a13      	ldr	r2, [pc, #76]	@ (8002048 <HAL_TIM_Base_MspInit+0x68>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	6413      	str	r3, [r2, #64]	@ 0x40
 8002002:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_TIM_Base_MspInit+0x68>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800200e:	e012      	b.n	8002036 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <HAL_TIM_Base_MspInit+0x6c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10d      	bne.n	8002036 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <HAL_TIM_Base_MspInit+0x68>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	4a09      	ldr	r2, [pc, #36]	@ (8002048 <HAL_TIM_Base_MspInit+0x68>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6413      	str	r3, [r2, #64]	@ 0x40
 800202a:	4b07      	ldr	r3, [pc, #28]	@ (8002048 <HAL_TIM_Base_MspInit+0x68>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40000400 	.word	0x40000400
 8002048:	40023800 	.word	0x40023800
 800204c:	40000800 	.word	0x40000800

08002050 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a12      	ldr	r2, [pc, #72]	@ (80020b8 <HAL_TIM_MspPostInit+0x68>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d11e      	bne.n	80020b0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <HAL_TIM_MspPostInit+0x6c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	4a10      	ldr	r2, [pc, #64]	@ (80020bc <HAL_TIM_MspPostInit+0x6c>)
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	6313      	str	r3, [r2, #48]	@ 0x30
 8002082:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <HAL_TIM_MspPostInit+0x6c>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800208e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002092:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020a0:	2302      	movs	r3, #2
 80020a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	4619      	mov	r1, r3
 80020aa:	4805      	ldr	r0, [pc, #20]	@ (80020c0 <HAL_TIM_MspPostInit+0x70>)
 80020ac:	f000 f9f2 	bl	8002494 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020b0:	bf00      	nop
 80020b2:	3720      	adds	r7, #32
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020400 	.word	0x40020400

080020c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <NMI_Handler+0x4>

080020cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <MemManage_Handler+0x4>

080020dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800211a:	f000 f891 	bl	8002240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <SystemInit+0x20>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	4a05      	ldr	r2, [pc, #20]	@ (8002144 <SystemInit+0x20>)
 8002130:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002134:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002148:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002180 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800214c:	f7ff ffea 	bl	8002124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002150:	480c      	ldr	r0, [pc, #48]	@ (8002184 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002152:	490d      	ldr	r1, [pc, #52]	@ (8002188 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002154:	4a0d      	ldr	r2, [pc, #52]	@ (800218c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002158:	e002      	b.n	8002160 <LoopCopyDataInit>

0800215a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800215c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215e:	3304      	adds	r3, #4

08002160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002164:	d3f9      	bcc.n	800215a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002166:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002168:	4c0a      	ldr	r4, [pc, #40]	@ (8002194 <LoopFillZerobss+0x22>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800216c:	e001      	b.n	8002172 <LoopFillZerobss>

0800216e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002170:	3204      	adds	r2, #4

08002172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002174:	d3fb      	bcc.n	800216e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002176:	f003 f8f1 	bl	800535c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800217a:	f7ff fadf 	bl	800173c <main>
  bx  lr    
 800217e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002180:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002188:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800218c:	08005444 	.word	0x08005444
  ldr r2, =_sbss
 8002190:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002194:	2000036c 	.word	0x2000036c

08002198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002198:	e7fe      	b.n	8002198 <ADC_IRQHandler>
	...

0800219c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a0:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <HAL_Init+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <HAL_Init+0x40>)
 80021a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021ac:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <HAL_Init+0x40>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <HAL_Init+0x40>)
 80021b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <HAL_Init+0x40>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <HAL_Init+0x40>)
 80021be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c4:	2003      	movs	r0, #3
 80021c6:	f000 f931 	bl	800242c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ca:	200f      	movs	r0, #15
 80021cc:	f000 f808 	bl	80021e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d0:	f7ff fe24 	bl	8001e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023c00 	.word	0x40023c00

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e8:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_InitTick+0x54>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_InitTick+0x58>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f93b 	bl	800247a <HAL_SYSTICK_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e00e      	b.n	800222c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d80a      	bhi.n	800222a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002214:	2200      	movs	r2, #0
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f000 f911 	bl	8002442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002220:	4a06      	ldr	r2, [pc, #24]	@ (800223c <HAL_InitTick+0x5c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000000 	.word	0x20000000
 8002238:	20000008 	.word	0x20000008
 800223c:	20000004 	.word	0x20000004

08002240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_IncTick+0x20>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_IncTick+0x24>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <HAL_IncTick+0x24>)
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000008 	.word	0x20000008
 8002264:	20000230 	.word	0x20000230

08002268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b03      	ldr	r3, [pc, #12]	@ (800227c <HAL_GetTick+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000230 	.word	0x20000230

08002280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff ffee 	bl	8002268 <HAL_GetTick>
 800228c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d005      	beq.n	80022a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229a:	4b0a      	ldr	r3, [pc, #40]	@ (80022c4 <HAL_Delay+0x44>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022a6:	bf00      	nop
 80022a8:	f7ff ffde 	bl	8002268 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d8f7      	bhi.n	80022a8 <HAL_Delay+0x28>
  {
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000008 	.word	0x20000008

080022c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	@ (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	@ (8002328 <__NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	490c      	ldr	r1, [pc, #48]	@ (8002378 <__NVIC_SetPriority+0x4c>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	440b      	add	r3, r1
 8002350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002354:	e00a      	b.n	800236c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4908      	ldr	r1, [pc, #32]	@ (800237c <__NVIC_SetPriority+0x50>)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3b04      	subs	r3, #4
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	440b      	add	r3, r1
 800236a:	761a      	strb	r2, [r3, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	@ 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f1c3 0307 	rsb	r3, r3, #7
 800239a:	2b04      	cmp	r3, #4
 800239c:	bf28      	it	cs
 800239e:	2304      	movcs	r3, #4
 80023a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d902      	bls.n	80023b0 <NVIC_EncodePriority+0x30>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3b03      	subs	r3, #3
 80023ae:	e000      	b.n	80023b2 <NVIC_EncodePriority+0x32>
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	4313      	orrs	r3, r2
         );
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	@ 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f8:	d301      	bcc.n	80023fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00f      	b.n	800241e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002428 <SysTick_Config+0x40>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002406:	210f      	movs	r1, #15
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f7ff ff8e 	bl	800232c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <SysTick_Config+0x40>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002416:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <SysTick_Config+0x40>)
 8002418:	2207      	movs	r2, #7
 800241a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	e000e010 	.word	0xe000e010

0800242c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff47 	bl	80022c8 <__NVIC_SetPriorityGrouping>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002454:	f7ff ff5c 	bl	8002310 <__NVIC_GetPriorityGrouping>
 8002458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7ff ff8e 	bl	8002380 <NVIC_EncodePriority>
 8002464:	4602      	mov	r2, r0
 8002466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff5d 	bl	800232c <__NVIC_SetPriority>
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffb0 	bl	80023e8 <SysTick_Config>
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	@ 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	e16b      	b.n	8002788 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b0:	2201      	movs	r2, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	f040 815a 	bne.w	8002782 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d005      	beq.n	80024e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d130      	bne.n	8002548 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	2203      	movs	r2, #3
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800251c:	2201      	movs	r2, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 0201 	and.w	r2, r3, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b03      	cmp	r3, #3
 8002552:	d017      	beq.n	8002584 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d123      	bne.n	80025d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	08da      	lsrs	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3208      	adds	r2, #8
 8002598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	220f      	movs	r2, #15
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	69b9      	ldr	r1, [r7, #24]
 80025d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80b4 	beq.w	8002782 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b60      	ldr	r3, [pc, #384]	@ (80027a0 <HAL_GPIO_Init+0x30c>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	4a5f      	ldr	r2, [pc, #380]	@ (80027a0 <HAL_GPIO_Init+0x30c>)
 8002624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002628:	6453      	str	r3, [r2, #68]	@ 0x44
 800262a:	4b5d      	ldr	r3, [pc, #372]	@ (80027a0 <HAL_GPIO_Init+0x30c>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002636:	4a5b      	ldr	r2, [pc, #364]	@ (80027a4 <HAL_GPIO_Init+0x310>)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	3302      	adds	r3, #2
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	220f      	movs	r2, #15
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a52      	ldr	r2, [pc, #328]	@ (80027a8 <HAL_GPIO_Init+0x314>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d02b      	beq.n	80026ba <HAL_GPIO_Init+0x226>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a51      	ldr	r2, [pc, #324]	@ (80027ac <HAL_GPIO_Init+0x318>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d025      	beq.n	80026b6 <HAL_GPIO_Init+0x222>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a50      	ldr	r2, [pc, #320]	@ (80027b0 <HAL_GPIO_Init+0x31c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01f      	beq.n	80026b2 <HAL_GPIO_Init+0x21e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4f      	ldr	r2, [pc, #316]	@ (80027b4 <HAL_GPIO_Init+0x320>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d019      	beq.n	80026ae <HAL_GPIO_Init+0x21a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4e      	ldr	r2, [pc, #312]	@ (80027b8 <HAL_GPIO_Init+0x324>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_GPIO_Init+0x216>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4d      	ldr	r2, [pc, #308]	@ (80027bc <HAL_GPIO_Init+0x328>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00d      	beq.n	80026a6 <HAL_GPIO_Init+0x212>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4c      	ldr	r2, [pc, #304]	@ (80027c0 <HAL_GPIO_Init+0x32c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_GPIO_Init+0x20e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4b      	ldr	r2, [pc, #300]	@ (80027c4 <HAL_GPIO_Init+0x330>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_GPIO_Init+0x20a>
 800269a:	2307      	movs	r3, #7
 800269c:	e00e      	b.n	80026bc <HAL_GPIO_Init+0x228>
 800269e:	2308      	movs	r3, #8
 80026a0:	e00c      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026a2:	2306      	movs	r3, #6
 80026a4:	e00a      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026a6:	2305      	movs	r3, #5
 80026a8:	e008      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026aa:	2304      	movs	r3, #4
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026ae:	2303      	movs	r3, #3
 80026b0:	e004      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e002      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026ba:	2300      	movs	r3, #0
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	f002 0203 	and.w	r2, r2, #3
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	4093      	lsls	r3, r2
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026cc:	4935      	ldr	r1, [pc, #212]	@ (80027a4 <HAL_GPIO_Init+0x310>)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026da:	4b3b      	ldr	r3, [pc, #236]	@ (80027c8 <HAL_GPIO_Init+0x334>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fe:	4a32      	ldr	r2, [pc, #200]	@ (80027c8 <HAL_GPIO_Init+0x334>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002704:	4b30      	ldr	r3, [pc, #192]	@ (80027c8 <HAL_GPIO_Init+0x334>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002728:	4a27      	ldr	r2, [pc, #156]	@ (80027c8 <HAL_GPIO_Init+0x334>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272e:	4b26      	ldr	r3, [pc, #152]	@ (80027c8 <HAL_GPIO_Init+0x334>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002752:	4a1d      	ldr	r2, [pc, #116]	@ (80027c8 <HAL_GPIO_Init+0x334>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002758:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <HAL_GPIO_Init+0x334>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800277c:	4a12      	ldr	r2, [pc, #72]	@ (80027c8 <HAL_GPIO_Init+0x334>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3301      	adds	r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	f67f ae90 	bls.w	80024b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3724      	adds	r7, #36	@ 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40013800 	.word	0x40013800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40020800 	.word	0x40020800
 80027b4:	40020c00 	.word	0x40020c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40021400 	.word	0x40021400
 80027c0:	40021800 	.word	0x40021800
 80027c4:	40021c00 	.word	0x40021c00
 80027c8:	40013c00 	.word	0x40013c00

080027cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	887b      	ldrh	r3, [r7, #2]
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
 80027e8:	e001      	b.n	80027ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	807b      	strh	r3, [r7, #2]
 8002808:	4613      	mov	r3, r2
 800280a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800280c:	787b      	ldrb	r3, [r7, #1]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002812:	887a      	ldrh	r2, [r7, #2]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002818:	e003      	b.n	8002822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800281a:	887b      	ldrh	r3, [r7, #2]
 800281c:	041a      	lsls	r2, r3, #16
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	619a      	str	r2, [r3, #24]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e12b      	b.n	8002a9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fb08 	bl	8001e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2224      	movs	r2, #36	@ 0x24
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002882:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002894:	f001 fbf6 	bl	8004084 <HAL_RCC_GetPCLK1Freq>
 8002898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a81      	ldr	r2, [pc, #516]	@ (8002aa4 <HAL_I2C_Init+0x274>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d807      	bhi.n	80028b4 <HAL_I2C_Init+0x84>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4a80      	ldr	r2, [pc, #512]	@ (8002aa8 <HAL_I2C_Init+0x278>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	bf94      	ite	ls
 80028ac:	2301      	movls	r3, #1
 80028ae:	2300      	movhi	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e006      	b.n	80028c2 <HAL_I2C_Init+0x92>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a7d      	ldr	r2, [pc, #500]	@ (8002aac <HAL_I2C_Init+0x27c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	bf94      	ite	ls
 80028bc:	2301      	movls	r3, #1
 80028be:	2300      	movhi	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0e7      	b.n	8002a9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a78      	ldr	r2, [pc, #480]	@ (8002ab0 <HAL_I2C_Init+0x280>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0c9b      	lsrs	r3, r3, #18
 80028d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a6a      	ldr	r2, [pc, #424]	@ (8002aa4 <HAL_I2C_Init+0x274>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d802      	bhi.n	8002904 <HAL_I2C_Init+0xd4>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3301      	adds	r3, #1
 8002902:	e009      	b.n	8002918 <HAL_I2C_Init+0xe8>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	4a69      	ldr	r2, [pc, #420]	@ (8002ab4 <HAL_I2C_Init+0x284>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	3301      	adds	r3, #1
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	430b      	orrs	r3, r1
 800291e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800292a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	495c      	ldr	r1, [pc, #368]	@ (8002aa4 <HAL_I2C_Init+0x274>)
 8002934:	428b      	cmp	r3, r1
 8002936:	d819      	bhi.n	800296c <HAL_I2C_Init+0x13c>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1e59      	subs	r1, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fbb1 f3f3 	udiv	r3, r1, r3
 8002946:	1c59      	adds	r1, r3, #1
 8002948:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800294c:	400b      	ands	r3, r1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_I2C_Init+0x138>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1e59      	subs	r1, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002960:	3301      	adds	r3, #1
 8002962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002966:	e051      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 8002968:	2304      	movs	r3, #4
 800296a:	e04f      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d111      	bne.n	8002998 <HAL_I2C_Init+0x168>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	440b      	add	r3, r1
 8002982:	fbb0 f3f3 	udiv	r3, r0, r3
 8002986:	3301      	adds	r3, #1
 8002988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e012      	b.n	80029be <HAL_I2C_Init+0x18e>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1e58      	subs	r0, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	0099      	lsls	r1, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Init+0x196>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e022      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10e      	bne.n	80029ec <HAL_I2C_Init+0x1bc>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1e58      	subs	r0, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	440b      	add	r3, r1
 80029dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ea:	e00f      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1e58      	subs	r0, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	0099      	lsls	r1, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	6809      	ldr	r1, [r1, #0]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6911      	ldr	r1, [r2, #16]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68d2      	ldr	r2, [r2, #12]
 8002a46:	4311      	orrs	r1, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	000186a0 	.word	0x000186a0
 8002aa8:	001e847f 	.word	0x001e847f
 8002aac:	003d08ff 	.word	0x003d08ff
 8002ab0:	431bde83 	.word	0x431bde83
 8002ab4:	10624dd3 	.word	0x10624dd3

08002ab8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	817b      	strh	r3, [r7, #10]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff fbcc 	bl	8002268 <HAL_GetTick>
 8002ad0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	f040 80e0 	bne.w	8002ca0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2319      	movs	r3, #25
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4970      	ldr	r1, [pc, #448]	@ (8002cac <HAL_I2C_Master_Transmit+0x1f4>)
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fc64 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
 8002af8:	e0d3      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_I2C_Master_Transmit+0x50>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e0cc      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d007      	beq.n	8002b2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2221      	movs	r2, #33	@ 0x21
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	893a      	ldrh	r2, [r7, #8]
 8002b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4a50      	ldr	r2, [pc, #320]	@ (8002cb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b70:	8979      	ldrh	r1, [r7, #10]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	6a3a      	ldr	r2, [r7, #32]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 face 	bl	8003118 <I2C_MasterRequestWrite>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e08d      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b9c:	e066      	b.n	8002c6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	6a39      	ldr	r1, [r7, #32]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fd22 	bl	80035ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d107      	bne.n	8002bc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06b      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d11b      	bne.n	8002c40 <HAL_I2C_Master_Transmit+0x188>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	781a      	ldrb	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	6a39      	ldr	r1, [r7, #32]
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fd19 	bl	800367c <I2C_WaitOnBTFFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00d      	beq.n	8002c6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d107      	bne.n	8002c68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e01a      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d194      	bne.n	8002b9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e000      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ca0:	2302      	movs	r3, #2
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	00100002 	.word	0x00100002
 8002cb0:	ffff0000 	.word	0xffff0000

08002cb4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08c      	sub	sp, #48	@ 0x30
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	817b      	strh	r3, [r7, #10]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff face 	bl	8002268 <HAL_GetTick>
 8002ccc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	f040 8217 	bne.w	800310a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2319      	movs	r3, #25
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	497c      	ldr	r1, [pc, #496]	@ (8002ed8 <HAL_I2C_Master_Receive+0x224>)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 fb66 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e20a      	b.n	800310c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_I2C_Master_Receive+0x50>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e203      	b.n	800310c <HAL_I2C_Master_Receive+0x458>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d007      	beq.n	8002d2a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2222      	movs	r2, #34	@ 0x22
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2210      	movs	r2, #16
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	893a      	ldrh	r2, [r7, #8]
 8002d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a5c      	ldr	r2, [pc, #368]	@ (8002edc <HAL_I2C_Master_Receive+0x228>)
 8002d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d6c:	8979      	ldrh	r1, [r7, #10]
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fa52 	bl	800321c <I2C_MasterRequestRead>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e1c4      	b.n	800310c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d113      	bne.n	8002db2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	623b      	str	r3, [r7, #32]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	623b      	str	r3, [r7, #32]
 8002d9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e198      	b.n	80030e4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d11b      	bne.n	8002df2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	e178      	b.n	80030e4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d11b      	bne.n	8002e32 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	e158      	b.n	80030e4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e58:	e144      	b.n	80030e4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	f200 80f1 	bhi.w	8003046 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d123      	bne.n	8002eb4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fc4b 	bl	800370c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e145      	b.n	800310c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002eb2:	e117      	b.n	80030e4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d14e      	bne.n	8002f5a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	4906      	ldr	r1, [pc, #24]	@ (8002ee0 <HAL_I2C_Master_Receive+0x22c>)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fa76 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e11a      	b.n	800310c <HAL_I2C_Master_Receive+0x458>
 8002ed6:	bf00      	nop
 8002ed8:	00100002 	.word	0x00100002
 8002edc:	ffff0000 	.word	0xffff0000
 8002ee0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f58:	e0c4      	b.n	80030e4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f60:	2200      	movs	r2, #0
 8002f62:	496c      	ldr	r1, [pc, #432]	@ (8003114 <HAL_I2C_Master_Receive+0x460>)
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 fa27 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0cb      	b.n	800310c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4955      	ldr	r1, [pc, #340]	@ (8003114 <HAL_I2C_Master_Receive+0x460>)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 f9f9 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e09d      	b.n	800310c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003044:	e04e      	b.n	80030e4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003048:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fb5e 	bl	800370c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e058      	b.n	800310c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b04      	cmp	r3, #4
 8003098:	d124      	bne.n	80030e4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d107      	bne.n	80030b2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030b0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f47f aeb6 	bne.w	8002e5a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e000      	b.n	800310c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
  }
}
 800310c:	4618      	mov	r0, r3
 800310e:	3728      	adds	r7, #40	@ 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	00010004 	.word	0x00010004

08003118 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	460b      	mov	r3, r1
 8003126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d006      	beq.n	8003142 <I2C_MasterRequestWrite+0x2a>
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d003      	beq.n	8003142 <I2C_MasterRequestWrite+0x2a>
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003140:	d108      	bne.n	8003154 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e00b      	b.n	800316c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	2b12      	cmp	r3, #18
 800315a:	d107      	bne.n	800316c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800316a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f91d 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00d      	beq.n	80031a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003192:	d103      	bne.n	800319c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e035      	b.n	800320c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031a8:	d108      	bne.n	80031bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031aa:	897b      	ldrh	r3, [r7, #10]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031b8:	611a      	str	r2, [r3, #16]
 80031ba:	e01b      	b.n	80031f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031bc:	897b      	ldrh	r3, [r7, #10]
 80031be:	11db      	asrs	r3, r3, #7
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f003 0306 	and.w	r3, r3, #6
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f063 030f 	orn	r3, r3, #15
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	490e      	ldr	r1, [pc, #56]	@ (8003214 <I2C_MasterRequestWrite+0xfc>)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f966 	bl	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e010      	b.n	800320c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031ea:	897b      	ldrh	r3, [r7, #10]
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4907      	ldr	r1, [pc, #28]	@ (8003218 <I2C_MasterRequestWrite+0x100>)
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f956 	bl	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	00010008 	.word	0x00010008
 8003218:	00010002 	.word	0x00010002

0800321c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	460b      	mov	r3, r1
 800322a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003230:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003240:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d006      	beq.n	8003256 <I2C_MasterRequestRead+0x3a>
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d003      	beq.n	8003256 <I2C_MasterRequestRead+0x3a>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003254:	d108      	bne.n	8003268 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e00b      	b.n	8003280 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	2b11      	cmp	r3, #17
 800326e:	d107      	bne.n	8003280 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800327e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f893 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00d      	beq.n	80032b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a6:	d103      	bne.n	80032b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e079      	b.n	80033a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032bc:	d108      	bne.n	80032d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032be:	897b      	ldrh	r3, [r7, #10]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	611a      	str	r2, [r3, #16]
 80032ce:	e05f      	b.n	8003390 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032d0:	897b      	ldrh	r3, [r7, #10]
 80032d2:	11db      	asrs	r3, r3, #7
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f003 0306 	and.w	r3, r3, #6
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f063 030f 	orn	r3, r3, #15
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4930      	ldr	r1, [pc, #192]	@ (80033b0 <I2C_MasterRequestRead+0x194>)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f8dc 	bl	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e054      	b.n	80033a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032fe:	897b      	ldrh	r3, [r7, #10]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4929      	ldr	r1, [pc, #164]	@ (80033b4 <I2C_MasterRequestRead+0x198>)
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f8cc 	bl	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e044      	b.n	80033a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003342:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f831 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800336a:	d103      	bne.n	8003374 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e017      	b.n	80033a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003378:	897b      	ldrh	r3, [r7, #10]
 800337a:	11db      	asrs	r3, r3, #7
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f003 0306 	and.w	r3, r3, #6
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f063 030e 	orn	r3, r3, #14
 8003388:	b2da      	uxtb	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4907      	ldr	r1, [pc, #28]	@ (80033b4 <I2C_MasterRequestRead+0x198>)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f888 	bl	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	00010008 	.word	0x00010008
 80033b4:	00010002 	.word	0x00010002

080033b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c8:	e048      	b.n	800345c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d044      	beq.n	800345c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d2:	f7fe ff49 	bl	8002268 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d302      	bcc.n	80033e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d139      	bne.n	800345c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	0c1b      	lsrs	r3, r3, #16
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d10d      	bne.n	800340e <I2C_WaitOnFlagUntilTimeout+0x56>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	43da      	mvns	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	4013      	ands	r3, r2
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	e00c      	b.n	8003428 <I2C_WaitOnFlagUntilTimeout+0x70>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	43da      	mvns	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4013      	ands	r3, r2
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	429a      	cmp	r2, r3
 800342c:	d116      	bne.n	800345c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e023      	b.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	0c1b      	lsrs	r3, r3, #16
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b01      	cmp	r3, #1
 8003464:	d10d      	bne.n	8003482 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	43da      	mvns	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4013      	ands	r3, r2
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	e00c      	b.n	800349c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	43da      	mvns	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4013      	ands	r3, r2
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d093      	beq.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ba:	e071      	b.n	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ca:	d123      	bne.n	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	f043 0204 	orr.w	r2, r3, #4
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e067      	b.n	80035e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d041      	beq.n	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fe fea4 	bl	8002268 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d136      	bne.n	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d10c      	bne.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	43da      	mvns	r2, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4013      	ands	r3, r2
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	bf14      	ite	ne
 800354e:	2301      	movne	r3, #1
 8003550:	2300      	moveq	r3, #0
 8003552:	b2db      	uxtb	r3, r3
 8003554:	e00b      	b.n	800356e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	43da      	mvns	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4013      	ands	r3, r2
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf14      	ite	ne
 8003568:	2301      	movne	r3, #1
 800356a:	2300      	moveq	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d016      	beq.n	80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358c:	f043 0220 	orr.w	r2, r3, #32
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e021      	b.n	80035e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	0c1b      	lsrs	r3, r3, #16
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d10c      	bne.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	43da      	mvns	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4013      	ands	r3, r2
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e00b      	b.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	43da      	mvns	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4013      	ands	r3, r2
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf14      	ite	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	2300      	moveq	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f47f af6d 	bne.w	80034bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f8:	e034      	b.n	8003664 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f8e3 	bl	80037c6 <I2C_IsAcknowledgeFailed>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e034      	b.n	8003674 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003610:	d028      	beq.n	8003664 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003612:	f7fe fe29 	bl	8002268 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	d302      	bcc.n	8003628 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d11d      	bne.n	8003664 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003632:	2b80      	cmp	r3, #128	@ 0x80
 8003634:	d016      	beq.n	8003664 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	f043 0220 	orr.w	r2, r3, #32
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e007      	b.n	8003674 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366e:	2b80      	cmp	r3, #128	@ 0x80
 8003670:	d1c3      	bne.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003688:	e034      	b.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f89b 	bl	80037c6 <I2C_IsAcknowledgeFailed>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e034      	b.n	8003704 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d028      	beq.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a2:	f7fe fde1 	bl	8002268 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d11d      	bne.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d016      	beq.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e007      	b.n	8003704 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d1c3      	bne.n	800368a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003718:	e049      	b.n	80037ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b10      	cmp	r3, #16
 8003726:	d119      	bne.n	800375c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0210 	mvn.w	r2, #16
 8003730:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e030      	b.n	80037be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375c:	f7fe fd84 	bl	8002268 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	429a      	cmp	r2, r3
 800376a:	d302      	bcc.n	8003772 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d11d      	bne.n	80037ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377c:	2b40      	cmp	r3, #64	@ 0x40
 800377e:	d016      	beq.n	80037ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e007      	b.n	80037be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b8:	2b40      	cmp	r3, #64	@ 0x40
 80037ba:	d1ae      	bne.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037dc:	d11b      	bne.n	8003816 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	f043 0204 	orr.w	r2, r3, #4
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e267      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d075      	beq.n	800392e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003842:	4b88      	ldr	r3, [pc, #544]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b04      	cmp	r3, #4
 800384c:	d00c      	beq.n	8003868 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384e:	4b85      	ldr	r3, [pc, #532]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003856:	2b08      	cmp	r3, #8
 8003858:	d112      	bne.n	8003880 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385a:	4b82      	ldr	r3, [pc, #520]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003862:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003866:	d10b      	bne.n	8003880 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003868:	4b7e      	ldr	r3, [pc, #504]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d05b      	beq.n	800392c <HAL_RCC_OscConfig+0x108>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d157      	bne.n	800392c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e242      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003888:	d106      	bne.n	8003898 <HAL_RCC_OscConfig+0x74>
 800388a:	4b76      	ldr	r3, [pc, #472]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a75      	ldr	r2, [pc, #468]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	e01d      	b.n	80038d4 <HAL_RCC_OscConfig+0xb0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038a0:	d10c      	bne.n	80038bc <HAL_RCC_OscConfig+0x98>
 80038a2:	4b70      	ldr	r3, [pc, #448]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6f      	ldr	r2, [pc, #444]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a6c      	ldr	r2, [pc, #432]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e00b      	b.n	80038d4 <HAL_RCC_OscConfig+0xb0>
 80038bc:	4b69      	ldr	r3, [pc, #420]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a68      	ldr	r2, [pc, #416]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b66      	ldr	r3, [pc, #408]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a65      	ldr	r2, [pc, #404]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fe fcc4 	bl	8002268 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e4:	f7fe fcc0 	bl	8002268 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	@ 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e207      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0xc0>
 8003902:	e014      	b.n	800392e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fe fcb0 	bl	8002268 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800390c:	f7fe fcac 	bl	8002268 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	@ 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e1f3      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391e:	4b51      	ldr	r3, [pc, #324]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0xe8>
 800392a:	e000      	b.n	800392e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d063      	beq.n	8003a02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800393a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003946:	4b47      	ldr	r3, [pc, #284]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800394e:	2b08      	cmp	r3, #8
 8003950:	d11c      	bne.n	800398c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003952:	4b44      	ldr	r3, [pc, #272]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d116      	bne.n	800398c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395e:	4b41      	ldr	r3, [pc, #260]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_RCC_OscConfig+0x152>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e1c7      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003976:	4b3b      	ldr	r3, [pc, #236]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4937      	ldr	r1, [pc, #220]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398a:	e03a      	b.n	8003a02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d020      	beq.n	80039d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003994:	4b34      	ldr	r3, [pc, #208]	@ (8003a68 <HAL_RCC_OscConfig+0x244>)
 8003996:	2201      	movs	r2, #1
 8003998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fe fc65 	bl	8002268 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a2:	f7fe fc61 	bl	8002268 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e1a8      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c0:	4b28      	ldr	r3, [pc, #160]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4925      	ldr	r1, [pc, #148]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	600b      	str	r3, [r1, #0]
 80039d4:	e015      	b.n	8003a02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d6:	4b24      	ldr	r3, [pc, #144]	@ (8003a68 <HAL_RCC_OscConfig+0x244>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fe fc44 	bl	8002268 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e4:	f7fe fc40 	bl	8002268 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e187      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d036      	beq.n	8003a7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d016      	beq.n	8003a44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a16:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <HAL_RCC_OscConfig+0x248>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1c:	f7fe fc24 	bl	8002268 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a24:	f7fe fc20 	bl	8002268 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e167      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a36:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x200>
 8003a42:	e01b      	b.n	8003a7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a44:	4b09      	ldr	r3, [pc, #36]	@ (8003a6c <HAL_RCC_OscConfig+0x248>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fc0d 	bl	8002268 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	e00e      	b.n	8003a70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a52:	f7fe fc09 	bl	8002268 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d907      	bls.n	8003a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e150      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
 8003a64:	40023800 	.word	0x40023800
 8003a68:	42470000 	.word	0x42470000
 8003a6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a70:	4b88      	ldr	r3, [pc, #544]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1ea      	bne.n	8003a52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8097 	beq.w	8003bb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8e:	4b81      	ldr	r3, [pc, #516]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	4b7d      	ldr	r3, [pc, #500]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	4a7c      	ldr	r2, [pc, #496]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aaa:	4b7a      	ldr	r3, [pc, #488]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aba:	4b77      	ldr	r3, [pc, #476]	@ (8003c98 <HAL_RCC_OscConfig+0x474>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d118      	bne.n	8003af8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac6:	4b74      	ldr	r3, [pc, #464]	@ (8003c98 <HAL_RCC_OscConfig+0x474>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a73      	ldr	r2, [pc, #460]	@ (8003c98 <HAL_RCC_OscConfig+0x474>)
 8003acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad2:	f7fe fbc9 	bl	8002268 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ada:	f7fe fbc5 	bl	8002268 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e10c      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	4b6a      	ldr	r3, [pc, #424]	@ (8003c98 <HAL_RCC_OscConfig+0x474>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d106      	bne.n	8003b0e <HAL_RCC_OscConfig+0x2ea>
 8003b00:	4b64      	ldr	r3, [pc, #400]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b04:	4a63      	ldr	r2, [pc, #396]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0c:	e01c      	b.n	8003b48 <HAL_RCC_OscConfig+0x324>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b05      	cmp	r3, #5
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x30c>
 8003b16:	4b5f      	ldr	r3, [pc, #380]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1a:	4a5e      	ldr	r2, [pc, #376]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b22:	4b5c      	ldr	r3, [pc, #368]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b26:	4a5b      	ldr	r2, [pc, #364]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0x324>
 8003b30:	4b58      	ldr	r3, [pc, #352]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b34:	4a57      	ldr	r2, [pc, #348]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b3c:	4b55      	ldr	r3, [pc, #340]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b40:	4a54      	ldr	r2, [pc, #336]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b42:	f023 0304 	bic.w	r3, r3, #4
 8003b46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d015      	beq.n	8003b7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b50:	f7fe fb8a 	bl	8002268 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b58:	f7fe fb86 	bl	8002268 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e0cb      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6e:	4b49      	ldr	r3, [pc, #292]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0ee      	beq.n	8003b58 <HAL_RCC_OscConfig+0x334>
 8003b7a:	e014      	b.n	8003ba6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7c:	f7fe fb74 	bl	8002268 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b84:	f7fe fb70 	bl	8002268 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e0b5      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1ee      	bne.n	8003b84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d105      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bac:	4b39      	ldr	r3, [pc, #228]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	4a38      	ldr	r2, [pc, #224]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80a1 	beq.w	8003d04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bc2:	4b34      	ldr	r3, [pc, #208]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d05c      	beq.n	8003c88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d141      	bne.n	8003c5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd6:	4b31      	ldr	r3, [pc, #196]	@ (8003c9c <HAL_RCC_OscConfig+0x478>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fe fb44 	bl	8002268 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be4:	f7fe fb40 	bl	8002268 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e087      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf6:	4b27      	ldr	r3, [pc, #156]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	019b      	lsls	r3, r3, #6
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	491b      	ldr	r1, [pc, #108]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c9c <HAL_RCC_OscConfig+0x478>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c32:	f7fe fb19 	bl	8002268 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fe fb15 	bl	8002268 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e05c      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4c:	4b11      	ldr	r3, [pc, #68]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x416>
 8003c58:	e054      	b.n	8003d04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5a:	4b10      	ldr	r3, [pc, #64]	@ (8003c9c <HAL_RCC_OscConfig+0x478>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7fe fb02 	bl	8002268 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c68:	f7fe fafe 	bl	8002268 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e045      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	4b06      	ldr	r3, [pc, #24]	@ (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x444>
 8003c86:	e03d      	b.n	8003d04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d107      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e038      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <HAL_RCC_OscConfig+0x4ec>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d028      	beq.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d121      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d11a      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d111      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce6:	085b      	lsrs	r3, r3, #1
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800

08003d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0cc      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b68      	ldr	r3, [pc, #416]	@ (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d90c      	bls.n	8003d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b65      	ldr	r3, [pc, #404]	@ (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b63      	ldr	r3, [pc, #396]	@ (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0b8      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d020      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d68:	4b59      	ldr	r3, [pc, #356]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a58      	ldr	r2, [pc, #352]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d80:	4b53      	ldr	r3, [pc, #332]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a52      	ldr	r2, [pc, #328]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8c:	4b50      	ldr	r3, [pc, #320]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	494d      	ldr	r1, [pc, #308]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d044      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	4b47      	ldr	r3, [pc, #284]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d119      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e07f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d003      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e06f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e067      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df2:	4b37      	ldr	r3, [pc, #220]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f023 0203 	bic.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4934      	ldr	r1, [pc, #208]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e04:	f7fe fa30 	bl	8002268 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0c:	f7fe fa2c 	bl	8002268 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e04f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 020c 	and.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d1eb      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e34:	4b25      	ldr	r3, [pc, #148]	@ (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d20c      	bcs.n	8003e5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b22      	ldr	r3, [pc, #136]	@ (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b20      	ldr	r3, [pc, #128]	@ (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e032      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e68:	4b19      	ldr	r3, [pc, #100]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4916      	ldr	r1, [pc, #88]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e86:	4b12      	ldr	r3, [pc, #72]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	490e      	ldr	r1, [pc, #56]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e9a:	f000 f821 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	490a      	ldr	r1, [pc, #40]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	5ccb      	ldrb	r3, [r1, r3]
 8003eae:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb2:	4a09      	ldr	r2, [pc, #36]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003eb6:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe f990 	bl	80021e0 <HAL_InitTick>

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023c00 	.word	0x40023c00
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	0800541c 	.word	0x0800541c
 8003ed8:	20000000 	.word	0x20000000
 8003edc:	20000004 	.word	0x20000004

08003ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee4:	b090      	sub	sp, #64	@ 0x40
 8003ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef8:	4b59      	ldr	r3, [pc, #356]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x180>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d00d      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0x40>
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	f200 80a1 	bhi.w	800404c <HAL_RCC_GetSysClockFreq+0x16c>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0x34>
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f12:	e09b      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f14:	4b53      	ldr	r3, [pc, #332]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f18:	e09b      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f1a:	4b53      	ldr	r3, [pc, #332]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f1e:	e098      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f20:	4b4f      	ldr	r3, [pc, #316]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f28:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f2a:	4b4d      	ldr	r3, [pc, #308]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d028      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f36:	4b4a      	ldr	r3, [pc, #296]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	099b      	lsrs	r3, r3, #6
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	623b      	str	r3, [r7, #32]
 8003f40:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4b47      	ldr	r3, [pc, #284]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f4c:	fb03 f201 	mul.w	r2, r3, r1
 8003f50:	2300      	movs	r3, #0
 8003f52:	fb00 f303 	mul.w	r3, r0, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	4a43      	ldr	r2, [pc, #268]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f5a:	fba0 1202 	umull	r1, r2, r0, r2
 8003f5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f60:	460a      	mov	r2, r1
 8003f62:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f66:	4413      	add	r3, r2
 8003f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	61fa      	str	r2, [r7, #28]
 8003f72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f7a:	f7fc fd43 	bl	8000a04 <__aeabi_uldivmod>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4613      	mov	r3, r2
 8003f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f86:	e053      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f88:	4b35      	ldr	r3, [pc, #212]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	2200      	movs	r2, #0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	617a      	str	r2, [r7, #20]
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f9a:	f04f 0b00 	mov.w	fp, #0
 8003f9e:	4652      	mov	r2, sl
 8003fa0:	465b      	mov	r3, fp
 8003fa2:	f04f 0000 	mov.w	r0, #0
 8003fa6:	f04f 0100 	mov.w	r1, #0
 8003faa:	0159      	lsls	r1, r3, #5
 8003fac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb0:	0150      	lsls	r0, r2, #5
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	ebb2 080a 	subs.w	r8, r2, sl
 8003fba:	eb63 090b 	sbc.w	r9, r3, fp
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003fd2:	ebb2 0408 	subs.w	r4, r2, r8
 8003fd6:	eb63 0509 	sbc.w	r5, r3, r9
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	00eb      	lsls	r3, r5, #3
 8003fe4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fe8:	00e2      	lsls	r2, r4, #3
 8003fea:	4614      	mov	r4, r2
 8003fec:	461d      	mov	r5, r3
 8003fee:	eb14 030a 	adds.w	r3, r4, sl
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	eb45 030b 	adc.w	r3, r5, fp
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	f04f 0300 	mov.w	r3, #0
 8004002:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004006:	4629      	mov	r1, r5
 8004008:	028b      	lsls	r3, r1, #10
 800400a:	4621      	mov	r1, r4
 800400c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004010:	4621      	mov	r1, r4
 8004012:	028a      	lsls	r2, r1, #10
 8004014:	4610      	mov	r0, r2
 8004016:	4619      	mov	r1, r3
 8004018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401a:	2200      	movs	r2, #0
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	60fa      	str	r2, [r7, #12]
 8004020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004024:	f7fc fcee 	bl	8000a04 <__aeabi_uldivmod>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4613      	mov	r3, r2
 800402e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004030:	4b0b      	ldr	r3, [pc, #44]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x180>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	3301      	adds	r3, #1
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004040:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800404a:	e002      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800404c:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x184>)
 800404e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004054:	4618      	mov	r0, r3
 8004056:	3740      	adds	r7, #64	@ 0x40
 8004058:	46bd      	mov	sp, r7
 800405a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800
 8004064:	00f42400 	.word	0x00f42400
 8004068:	017d7840 	.word	0x017d7840

0800406c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004070:	4b03      	ldr	r3, [pc, #12]	@ (8004080 <HAL_RCC_GetHCLKFreq+0x14>)
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000000 	.word	0x20000000

08004084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004088:	f7ff fff0 	bl	800406c <HAL_RCC_GetHCLKFreq>
 800408c:	4602      	mov	r2, r0
 800408e:	4b05      	ldr	r3, [pc, #20]	@ (80040a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	0a9b      	lsrs	r3, r3, #10
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	4903      	ldr	r1, [pc, #12]	@ (80040a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800409a:	5ccb      	ldrb	r3, [r1, r3]
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40023800 	.word	0x40023800
 80040a8:	0800542c 	.word	0x0800542c

080040ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d105      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d035      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040d4:	4b62      	ldr	r3, [pc, #392]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040da:	f7fe f8c5 	bl	8002268 <HAL_GetTick>
 80040de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040e0:	e008      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040e2:	f7fe f8c1 	bl	8002268 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e0b0      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040f4:	4b5b      	ldr	r3, [pc, #364]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f0      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	019a      	lsls	r2, r3, #6
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	071b      	lsls	r3, r3, #28
 800410c:	4955      	ldr	r1, [pc, #340]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004114:	4b52      	ldr	r3, [pc, #328]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004116:	2201      	movs	r2, #1
 8004118:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800411a:	f7fe f8a5 	bl	8002268 <HAL_GetTick>
 800411e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004122:	f7fe f8a1 	bl	8002268 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e090      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004134:	4b4b      	ldr	r3, [pc, #300]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f0      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8083 	beq.w	8004254 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	4b44      	ldr	r3, [pc, #272]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004156:	4a43      	ldr	r2, [pc, #268]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800415c:	6413      	str	r3, [r2, #64]	@ 0x40
 800415e:	4b41      	ldr	r3, [pc, #260]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800416a:	4b3f      	ldr	r3, [pc, #252]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a3e      	ldr	r2, [pc, #248]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004174:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004176:	f7fe f877 	bl	8002268 <HAL_GetTick>
 800417a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417e:	f7fe f873 	bl	8002268 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e062      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004190:	4b35      	ldr	r3, [pc, #212]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800419c:	4b31      	ldr	r3, [pc, #196]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041a4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d02f      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d028      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041c4:	4b29      	ldr	r3, [pc, #164]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041ca:	4b28      	ldr	r3, [pc, #160]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041d0:	4a24      	ldr	r2, [pc, #144]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041d6:	4b23      	ldr	r3, [pc, #140]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d114      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041e2:	f7fe f841 	bl	8002268 <HAL_GetTick>
 80041e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e8:	e00a      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ea:	f7fe f83d 	bl	8002268 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d901      	bls.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e02a      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004200:	4b18      	ldr	r3, [pc, #96]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ee      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004214:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004218:	d10d      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800421a:	4b12      	ldr	r3, [pc, #72]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800422a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800422e:	490d      	ldr	r1, [pc, #52]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004230:	4313      	orrs	r3, r2
 8004232:	608b      	str	r3, [r1, #8]
 8004234:	e005      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004236:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	4a0a      	ldr	r2, [pc, #40]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800423c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004240:	6093      	str	r3, [r2, #8]
 8004242:	4b08      	ldr	r3, [pc, #32]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004244:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424e:	4905      	ldr	r1, [pc, #20]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004250:	4313      	orrs	r3, r2
 8004252:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	42470068 	.word	0x42470068
 8004264:	40023800 	.word	0x40023800
 8004268:	40007000 	.word	0x40007000
 800426c:	42470e40 	.word	0x42470e40

08004270 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e073      	b.n	800436a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	7f5b      	ldrb	r3, [r3, #29]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fd fe32 	bl	8001efc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d055      	beq.n	8004358 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	22ca      	movs	r2, #202	@ 0xca
 80042b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2253      	movs	r2, #83	@ 0x53
 80042ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f99d 	bl	80045fc <RTC_EnterInitMode>
 80042c2:	4603      	mov	r3, r0
 80042c4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d12c      	bne.n	8004326 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6812      	ldr	r2, [r2, #0]
 80042d6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80042da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042de:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6899      	ldr	r1, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68d2      	ldr	r2, [r2, #12]
 8004306:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6919      	ldr	r1, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	041a      	lsls	r2, r3, #16
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f9a4 	bl	800466a <RTC_ExitInitMode>
 8004322:	4603      	mov	r3, r0
 8004324:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d110      	bne.n	800434e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800433a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	22ff      	movs	r2, #255	@ 0xff
 8004354:	625a      	str	r2, [r3, #36]	@ 0x24
 8004356:	e001      	b.n	800435c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004368:	7bfb      	ldrb	r3, [r7, #15]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004372:	b590      	push	{r4, r7, lr}
 8004374:	b087      	sub	sp, #28
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	7f1b      	ldrb	r3, [r3, #28]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_RTC_SetTime+0x1c>
 800438a:	2302      	movs	r3, #2
 800438c:	e087      	b.n	800449e <HAL_RTC_SetTime+0x12c>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2202      	movs	r2, #2
 8004398:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d126      	bne.n	80043ee <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2200      	movs	r2, #0
 80043b2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f97b 	bl	80046b4 <RTC_ByteToBcd2>
 80043be:	4603      	mov	r3, r0
 80043c0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	785b      	ldrb	r3, [r3, #1]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f974 	bl	80046b4 <RTC_ByteToBcd2>
 80043cc:	4603      	mov	r3, r0
 80043ce:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80043d0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	789b      	ldrb	r3, [r3, #2]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f96c 	bl	80046b4 <RTC_ByteToBcd2>
 80043dc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043de:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	78db      	ldrb	r3, [r3, #3]
 80043e6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	e018      	b.n	8004420 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2200      	movs	r2, #0
 8004400:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	785b      	ldrb	r3, [r3, #1]
 800440c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800440e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004414:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	78db      	ldrb	r3, [r3, #3]
 800441a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800441c:	4313      	orrs	r3, r2
 800441e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	22ca      	movs	r2, #202	@ 0xca
 8004426:	625a      	str	r2, [r3, #36]	@ 0x24
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2253      	movs	r2, #83	@ 0x53
 800442e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f8e3 	bl	80045fc <RTC_EnterInitMode>
 8004436:	4603      	mov	r3, r0
 8004438:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d120      	bne.n	8004482 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800444a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800444e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800445e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6899      	ldr	r1, [r3, #8]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	431a      	orrs	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f8f6 	bl	800466a <RTC_ExitInitMode>
 800447e:	4603      	mov	r3, r0
 8004480:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004482:	7cfb      	ldrb	r3, [r7, #19]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	22ff      	movs	r2, #255	@ 0xff
 8004494:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]

  return status;
 800449c:	7cfb      	ldrb	r3, [r7, #19]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd90      	pop	{r4, r7, pc}

080044a6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044a6:	b590      	push	{r4, r7, lr}
 80044a8:	b087      	sub	sp, #28
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	7f1b      	ldrb	r3, [r3, #28]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_RTC_SetDate+0x1c>
 80044be:	2302      	movs	r3, #2
 80044c0:	e071      	b.n	80045a6 <HAL_RTC_SetDate+0x100>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2202      	movs	r2, #2
 80044cc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10e      	bne.n	80044f2 <HAL_RTC_SetDate+0x4c>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	785b      	ldrb	r3, [r3, #1]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	785b      	ldrb	r3, [r3, #1]
 80044e4:	f023 0310 	bic.w	r3, r3, #16
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	330a      	adds	r3, #10
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d11c      	bne.n	8004532 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	78db      	ldrb	r3, [r3, #3]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 f8d9 	bl	80046b4 <RTC_ByteToBcd2>
 8004502:	4603      	mov	r3, r0
 8004504:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	785b      	ldrb	r3, [r3, #1]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f8d2 	bl	80046b4 <RTC_ByteToBcd2>
 8004510:	4603      	mov	r3, r0
 8004512:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004514:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	789b      	ldrb	r3, [r3, #2]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f8ca 	bl	80046b4 <RTC_ByteToBcd2>
 8004520:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004522:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	e00e      	b.n	8004550 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	78db      	ldrb	r3, [r3, #3]
 8004536:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	785b      	ldrb	r3, [r3, #1]
 800453c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800453e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004544:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	22ca      	movs	r2, #202	@ 0xca
 8004556:	625a      	str	r2, [r3, #36]	@ 0x24
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2253      	movs	r2, #83	@ 0x53
 800455e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f84b 	bl	80045fc <RTC_EnterInitMode>
 8004566:	4603      	mov	r3, r0
 8004568:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800456a:	7cfb      	ldrb	r3, [r7, #19]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10c      	bne.n	800458a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800457a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800457e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f872 	bl	800466a <RTC_ExitInitMode>
 8004586:	4603      	mov	r3, r0
 8004588:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800458a:	7cfb      	ldrb	r3, [r7, #19]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	22ff      	movs	r2, #255	@ 0xff
 800459c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	771a      	strb	r2, [r3, #28]

  return status;
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd90      	pop	{r4, r7, pc}
	...

080045b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0d      	ldr	r2, [pc, #52]	@ (80045f8 <HAL_RTC_WaitForSynchro+0x48>)
 80045c2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045c4:	f7fd fe50 	bl	8002268 <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045ca:	e009      	b.n	80045e0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045cc:	f7fd fe4c 	bl	8002268 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045da:	d901      	bls.n	80045e0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e007      	b.n	80045f0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0ee      	beq.n	80045cc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	00017f5f 	.word	0x00017f5f

080045fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d122      	bne.n	8004660 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004628:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800462a:	f7fd fe1d 	bl	8002268 <HAL_GetTick>
 800462e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004630:	e00c      	b.n	800464c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004632:	f7fd fe19 	bl	8002268 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004640:	d904      	bls.n	800464c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2204      	movs	r2, #4
 8004646:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <RTC_EnterInitMode+0x64>
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d1e8      	bne.n	8004632 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004684:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff ff8b 	bl	80045b0 <HAL_RTC_WaitForSynchro>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d004      	beq.n	80046aa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2204      	movs	r2, #4
 80046a4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80046c2:	e005      	b.n	80046d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3301      	adds	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	3b0a      	subs	r3, #10
 80046ce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	2b09      	cmp	r3, #9
 80046d4:	d8f6      	bhi.n	80046c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	b2db      	uxtb	r3, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e07b      	b.n	80047fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	2b00      	cmp	r3, #0
 8004708:	d108      	bne.n	800471c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004712:	d009      	beq.n	8004728 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	61da      	str	r2, [r3, #28]
 800471a:	e005      	b.n	8004728 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fd fc04 	bl	8001f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800475e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ac:	ea42 0103 	orr.w	r1, r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	f003 0104 	and.w	r1, r3, #4
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	f003 0210 	and.w	r2, r3, #16
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e041      	b.n	8004898 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fd fbd9 	bl	8001fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f000 fa11 	bl	8004c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e041      	b.n	8004936 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f839 	bl	800493e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f000 f9c2 	bl	8004c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800496e:	2302      	movs	r3, #2
 8004970:	e0ae      	b.n	8004ad0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b0c      	cmp	r3, #12
 800497e:	f200 809f 	bhi.w	8004ac0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004982:	a201      	add	r2, pc, #4	@ (adr r2, 8004988 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	080049bd 	.word	0x080049bd
 800498c:	08004ac1 	.word	0x08004ac1
 8004990:	08004ac1 	.word	0x08004ac1
 8004994:	08004ac1 	.word	0x08004ac1
 8004998:	080049fd 	.word	0x080049fd
 800499c:	08004ac1 	.word	0x08004ac1
 80049a0:	08004ac1 	.word	0x08004ac1
 80049a4:	08004ac1 	.word	0x08004ac1
 80049a8:	08004a3f 	.word	0x08004a3f
 80049ac:	08004ac1 	.word	0x08004ac1
 80049b0:	08004ac1 	.word	0x08004ac1
 80049b4:	08004ac1 	.word	0x08004ac1
 80049b8:	08004a7f 	.word	0x08004a7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f9f6 	bl	8004db4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0208 	orr.w	r2, r2, #8
 80049d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0204 	bic.w	r2, r2, #4
 80049e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6999      	ldr	r1, [r3, #24]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	619a      	str	r2, [r3, #24]
      break;
 80049fa:	e064      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fa46 	bl	8004e94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6999      	ldr	r1, [r3, #24]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	021a      	lsls	r2, r3, #8
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	619a      	str	r2, [r3, #24]
      break;
 8004a3c:	e043      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fa9b 	bl	8004f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0208 	orr.w	r2, r2, #8
 8004a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0204 	bic.w	r2, r2, #4
 8004a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69d9      	ldr	r1, [r3, #28]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	61da      	str	r2, [r3, #28]
      break;
 8004a7c:	e023      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 faef 	bl	8005068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69d9      	ldr	r1, [r3, #28]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	021a      	lsls	r2, r3, #8
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	61da      	str	r2, [r3, #28]
      break;
 8004abe:	e002      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_TIM_ConfigClockSource+0x1c>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e0b4      	b.n	8004c5e <HAL_TIM_ConfigClockSource+0x186>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b2c:	d03e      	beq.n	8004bac <HAL_TIM_ConfigClockSource+0xd4>
 8004b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b32:	f200 8087 	bhi.w	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b3a:	f000 8086 	beq.w	8004c4a <HAL_TIM_ConfigClockSource+0x172>
 8004b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b42:	d87f      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b44:	2b70      	cmp	r3, #112	@ 0x70
 8004b46:	d01a      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0xa6>
 8004b48:	2b70      	cmp	r3, #112	@ 0x70
 8004b4a:	d87b      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	2b60      	cmp	r3, #96	@ 0x60
 8004b4e:	d050      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x11a>
 8004b50:	2b60      	cmp	r3, #96	@ 0x60
 8004b52:	d877      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b50      	cmp	r3, #80	@ 0x50
 8004b56:	d03c      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0xfa>
 8004b58:	2b50      	cmp	r3, #80	@ 0x50
 8004b5a:	d873      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b40      	cmp	r3, #64	@ 0x40
 8004b5e:	d058      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x13a>
 8004b60:	2b40      	cmp	r3, #64	@ 0x40
 8004b62:	d86f      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b64:	2b30      	cmp	r3, #48	@ 0x30
 8004b66:	d064      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x15a>
 8004b68:	2b30      	cmp	r3, #48	@ 0x30
 8004b6a:	d86b      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d060      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x15a>
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d867      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d05c      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x15a>
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d05a      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x15a>
 8004b7c:	e062      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b8e:	f000 fb3b 	bl	8005208 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	609a      	str	r2, [r3, #8]
      break;
 8004baa:	e04f      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bbc:	f000 fb24 	bl	8005208 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bce:	609a      	str	r2, [r3, #8]
      break;
 8004bd0:	e03c      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bde:	461a      	mov	r2, r3
 8004be0:	f000 fa98 	bl	8005114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2150      	movs	r1, #80	@ 0x50
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 faf1 	bl	80051d2 <TIM_ITRx_SetConfig>
      break;
 8004bf0:	e02c      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f000 fab7 	bl	8005172 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2160      	movs	r1, #96	@ 0x60
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fae1 	bl	80051d2 <TIM_ITRx_SetConfig>
      break;
 8004c10:	e01c      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f000 fa78 	bl	8005114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2140      	movs	r1, #64	@ 0x40
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fad1 	bl	80051d2 <TIM_ITRx_SetConfig>
      break;
 8004c30:	e00c      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	f000 fac8 	bl	80051d2 <TIM_ITRx_SetConfig>
      break;
 8004c42:	e003      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
      break;
 8004c48:	e000      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a43      	ldr	r2, [pc, #268]	@ (8004d88 <TIM_Base_SetConfig+0x120>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c86:	d00f      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a40      	ldr	r2, [pc, #256]	@ (8004d8c <TIM_Base_SetConfig+0x124>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00b      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3f      	ldr	r2, [pc, #252]	@ (8004d90 <TIM_Base_SetConfig+0x128>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3e      	ldr	r2, [pc, #248]	@ (8004d94 <TIM_Base_SetConfig+0x12c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a3d      	ldr	r2, [pc, #244]	@ (8004d98 <TIM_Base_SetConfig+0x130>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d108      	bne.n	8004cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a32      	ldr	r2, [pc, #200]	@ (8004d88 <TIM_Base_SetConfig+0x120>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d02b      	beq.n	8004d1a <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc8:	d027      	beq.n	8004d1a <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2f      	ldr	r2, [pc, #188]	@ (8004d8c <TIM_Base_SetConfig+0x124>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d023      	beq.n	8004d1a <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8004d90 <TIM_Base_SetConfig+0x128>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d01f      	beq.n	8004d1a <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8004d94 <TIM_Base_SetConfig+0x12c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01b      	beq.n	8004d1a <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8004d98 <TIM_Base_SetConfig+0x130>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d017      	beq.n	8004d1a <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a2b      	ldr	r2, [pc, #172]	@ (8004d9c <TIM_Base_SetConfig+0x134>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8004da0 <TIM_Base_SetConfig+0x138>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00f      	beq.n	8004d1a <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a29      	ldr	r2, [pc, #164]	@ (8004da4 <TIM_Base_SetConfig+0x13c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d00b      	beq.n	8004d1a <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a28      	ldr	r2, [pc, #160]	@ (8004da8 <TIM_Base_SetConfig+0x140>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d007      	beq.n	8004d1a <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a27      	ldr	r2, [pc, #156]	@ (8004dac <TIM_Base_SetConfig+0x144>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d003      	beq.n	8004d1a <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a26      	ldr	r2, [pc, #152]	@ (8004db0 <TIM_Base_SetConfig+0x148>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d108      	bne.n	8004d2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d88 <TIM_Base_SetConfig+0x120>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d003      	beq.n	8004d5a <TIM_Base_SetConfig+0xf2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a10      	ldr	r2, [pc, #64]	@ (8004d98 <TIM_Base_SetConfig+0x130>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d103      	bne.n	8004d62 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f043 0204 	orr.w	r2, r3, #4
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	601a      	str	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40010000 	.word	0x40010000
 8004d8c:	40000400 	.word	0x40000400
 8004d90:	40000800 	.word	0x40000800
 8004d94:	40000c00 	.word	0x40000c00
 8004d98:	40010400 	.word	0x40010400
 8004d9c:	40014000 	.word	0x40014000
 8004da0:	40014400 	.word	0x40014400
 8004da4:	40014800 	.word	0x40014800
 8004da8:	40001800 	.word	0x40001800
 8004dac:	40001c00 	.word	0x40001c00
 8004db0:	40002000 	.word	0x40002000

08004db4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	f023 0201 	bic.w	r2, r3, #1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0303 	bic.w	r3, r3, #3
 8004dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f023 0302 	bic.w	r3, r3, #2
 8004dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a20      	ldr	r2, [pc, #128]	@ (8004e8c <TIM_OC1_SetConfig+0xd8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_OC1_SetConfig+0x64>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a1f      	ldr	r2, [pc, #124]	@ (8004e90 <TIM_OC1_SetConfig+0xdc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d10c      	bne.n	8004e32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0308 	bic.w	r3, r3, #8
 8004e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f023 0304 	bic.w	r3, r3, #4
 8004e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a15      	ldr	r2, [pc, #84]	@ (8004e8c <TIM_OC1_SetConfig+0xd8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_OC1_SetConfig+0x8e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a14      	ldr	r2, [pc, #80]	@ (8004e90 <TIM_OC1_SetConfig+0xdc>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d111      	bne.n	8004e66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	621a      	str	r2, [r3, #32]
}
 8004e80:	bf00      	nop
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	40010000 	.word	0x40010000
 8004e90:	40010400 	.word	0x40010400

08004e94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f023 0210 	bic.w	r2, r3, #16
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0320 	bic.w	r3, r3, #32
 8004ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a22      	ldr	r2, [pc, #136]	@ (8004f78 <TIM_OC2_SetConfig+0xe4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d003      	beq.n	8004efc <TIM_OC2_SetConfig+0x68>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a21      	ldr	r2, [pc, #132]	@ (8004f7c <TIM_OC2_SetConfig+0xe8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10d      	bne.n	8004f18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a17      	ldr	r2, [pc, #92]	@ (8004f78 <TIM_OC2_SetConfig+0xe4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_OC2_SetConfig+0x94>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a16      	ldr	r2, [pc, #88]	@ (8004f7c <TIM_OC2_SetConfig+0xe8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d113      	bne.n	8004f50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40010400 	.word	0x40010400

08004f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0303 	bic.w	r3, r3, #3
 8004fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a21      	ldr	r2, [pc, #132]	@ (8005060 <TIM_OC3_SetConfig+0xe0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d003      	beq.n	8004fe6 <TIM_OC3_SetConfig+0x66>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a20      	ldr	r2, [pc, #128]	@ (8005064 <TIM_OC3_SetConfig+0xe4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d10d      	bne.n	8005002 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a16      	ldr	r2, [pc, #88]	@ (8005060 <TIM_OC3_SetConfig+0xe0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d003      	beq.n	8005012 <TIM_OC3_SetConfig+0x92>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a15      	ldr	r2, [pc, #84]	@ (8005064 <TIM_OC3_SetConfig+0xe4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d113      	bne.n	800503a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	621a      	str	r2, [r3, #32]
}
 8005054:	bf00      	nop
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	40010000 	.word	0x40010000
 8005064:	40010400 	.word	0x40010400

08005068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800509e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	031b      	lsls	r3, r3, #12
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a12      	ldr	r2, [pc, #72]	@ (800510c <TIM_OC4_SetConfig+0xa4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_OC4_SetConfig+0x68>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a11      	ldr	r2, [pc, #68]	@ (8005110 <TIM_OC4_SetConfig+0xa8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d109      	bne.n	80050e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	019b      	lsls	r3, r3, #6
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40010000 	.word	0x40010000
 8005110:	40010400 	.word	0x40010400

08005114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	f023 0201 	bic.w	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800513e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f023 030a 	bic.w	r3, r3, #10
 8005150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005172:	b480      	push	{r7}
 8005174:	b087      	sub	sp, #28
 8005176:	af00      	add	r7, sp, #0
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	f023 0210 	bic.w	r2, r3, #16
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800519c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	031b      	lsls	r3, r3, #12
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f043 0307 	orr.w	r3, r3, #7
 80051f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	609a      	str	r2, [r3, #8]
}
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	021a      	lsls	r2, r3, #8
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	431a      	orrs	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4313      	orrs	r3, r2
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	609a      	str	r2, [r3, #8]
}
 800523c:	bf00      	nop
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800525c:	2302      	movs	r3, #2
 800525e:	e05a      	b.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a21      	ldr	r2, [pc, #132]	@ (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d022      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ac:	d01d      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d018      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1b      	ldr	r2, [pc, #108]	@ (800532c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00e      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a18      	ldr	r2, [pc, #96]	@ (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d009      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a17      	ldr	r2, [pc, #92]	@ (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d004      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a15      	ldr	r2, [pc, #84]	@ (800533c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d10c      	bne.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40010000 	.word	0x40010000
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800
 8005330:	40000c00 	.word	0x40000c00
 8005334:	40010400 	.word	0x40010400
 8005338:	40014000 	.word	0x40014000
 800533c:	40001800 	.word	0x40001800

08005340 <memset>:
 8005340:	4402      	add	r2, r0
 8005342:	4603      	mov	r3, r0
 8005344:	4293      	cmp	r3, r2
 8005346:	d100      	bne.n	800534a <memset+0xa>
 8005348:	4770      	bx	lr
 800534a:	f803 1b01 	strb.w	r1, [r3], #1
 800534e:	e7f9      	b.n	8005344 <memset+0x4>

08005350 <__errno>:
 8005350:	4b01      	ldr	r3, [pc, #4]	@ (8005358 <__errno+0x8>)
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	2000000c 	.word	0x2000000c

0800535c <__libc_init_array>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	4d0d      	ldr	r5, [pc, #52]	@ (8005394 <__libc_init_array+0x38>)
 8005360:	4c0d      	ldr	r4, [pc, #52]	@ (8005398 <__libc_init_array+0x3c>)
 8005362:	1b64      	subs	r4, r4, r5
 8005364:	10a4      	asrs	r4, r4, #2
 8005366:	2600      	movs	r6, #0
 8005368:	42a6      	cmp	r6, r4
 800536a:	d109      	bne.n	8005380 <__libc_init_array+0x24>
 800536c:	4d0b      	ldr	r5, [pc, #44]	@ (800539c <__libc_init_array+0x40>)
 800536e:	4c0c      	ldr	r4, [pc, #48]	@ (80053a0 <__libc_init_array+0x44>)
 8005370:	f000 f848 	bl	8005404 <_init>
 8005374:	1b64      	subs	r4, r4, r5
 8005376:	10a4      	asrs	r4, r4, #2
 8005378:	2600      	movs	r6, #0
 800537a:	42a6      	cmp	r6, r4
 800537c:	d105      	bne.n	800538a <__libc_init_array+0x2e>
 800537e:	bd70      	pop	{r4, r5, r6, pc}
 8005380:	f855 3b04 	ldr.w	r3, [r5], #4
 8005384:	4798      	blx	r3
 8005386:	3601      	adds	r6, #1
 8005388:	e7ee      	b.n	8005368 <__libc_init_array+0xc>
 800538a:	f855 3b04 	ldr.w	r3, [r5], #4
 800538e:	4798      	blx	r3
 8005390:	3601      	adds	r6, #1
 8005392:	e7f2      	b.n	800537a <__libc_init_array+0x1e>
 8005394:	0800543c 	.word	0x0800543c
 8005398:	0800543c 	.word	0x0800543c
 800539c:	0800543c 	.word	0x0800543c
 80053a0:	08005440 	.word	0x08005440

080053a4 <memcpy>:
 80053a4:	440a      	add	r2, r1
 80053a6:	4291      	cmp	r1, r2
 80053a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053ac:	d100      	bne.n	80053b0 <memcpy+0xc>
 80053ae:	4770      	bx	lr
 80053b0:	b510      	push	{r4, lr}
 80053b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053ba:	4291      	cmp	r1, r2
 80053bc:	d1f9      	bne.n	80053b2 <memcpy+0xe>
 80053be:	bd10      	pop	{r4, pc}

080053c0 <sqrtf>:
 80053c0:	b508      	push	{r3, lr}
 80053c2:	ed2d 8b02 	vpush	{d8}
 80053c6:	eeb0 8a40 	vmov.f32	s16, s0
 80053ca:	f000 f817 	bl	80053fc <__ieee754_sqrtf>
 80053ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80053d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d6:	d60c      	bvs.n	80053f2 <sqrtf+0x32>
 80053d8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80053f8 <sqrtf+0x38>
 80053dc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80053e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e4:	d505      	bpl.n	80053f2 <sqrtf+0x32>
 80053e6:	f7ff ffb3 	bl	8005350 <__errno>
 80053ea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80053ee:	2321      	movs	r3, #33	@ 0x21
 80053f0:	6003      	str	r3, [r0, #0]
 80053f2:	ecbd 8b02 	vpop	{d8}
 80053f6:	bd08      	pop	{r3, pc}
 80053f8:	00000000 	.word	0x00000000

080053fc <__ieee754_sqrtf>:
 80053fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005400:	4770      	bx	lr
	...

08005404 <_init>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	bf00      	nop
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr

08005410 <_fini>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr
